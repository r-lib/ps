[{"path":[]},{"path":"https://ps.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://ps.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://ps.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://ps.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://ps.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://ps.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://ps.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://ps.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://ps.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://ps.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://ps.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://ps.r-lib.org/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to ps","title":"Contributing to ps","text":"outlines propose change ps. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://ps.r-lib.org/dev/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to ps","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. YES: edit roxygen comment .R file R/. : edit .Rd file man/.","code":""},{"path":"https://ps.r-lib.org/dev/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"Contributing to ps","text":"make substantial pull request, always file issue make sure someone team agrees ’s problem. ’ve found bug, create associated issue illustrate bug minimal reprex.","code":""},{"path":"https://ps.r-lib.org/dev/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"Contributing to ps","text":"recommend create Git branch pull request (PR). Look Travis AppVeyor build status making changes. README contain badges continuous integration services used package. New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"https://ps.r-lib.org/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to ps","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 ps authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ps.r-lib.org/dev/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with ps","title":"Getting help with ps","text":"Thanks using ps. filing issue, places explore pieces put together make process smooth possible. Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site. Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed. right place, need file issue, please review “File issues” paragraph tidyverse contributing guidelines. Thanks help!","code":""},{"path":"https://ps.r-lib.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jay Loden. Author. Dave Daeschler. Author. Giampaolo Rodola'. Author. Gábor Csárdi. Author, maintainer. . Copyright holder, funder.","code":""},{"path":"https://ps.r-lib.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Loden J, Daeschler D, Rodola' G, Csárdi G (2025). ps: List, Query, Manipulate System Processes. R package version 1.9.0.9000, https://github.com/r-lib/ps.","code":"@Manual{,   title = {ps: List, Query, Manipulate System Processes},   author = {Jay Loden and Dave Daeschler and Giampaolo Rodola' and Gábor Csárdi},   year = {2025},   note = {R package version 1.9.0.9000},   url = {https://github.com/r-lib/ps}, }"},{"path":"https://ps.r-lib.org/dev/header.html","id":null,"dir":"","previous_headings":"","what":"ps","title":"ps","text":"List, Query, Manipulate System Processes  ps implements API query manipulate system processes. code based psutil Python package.","code":""},{"path":"https://ps.r-lib.org/dev/index.html","id":"ps","dir":"","previous_headings":"","what":"List, Query, Manipulate System Processes","title":"List, Query, Manipulate System Processes","text":"List, Query, Manipulate System Processes ps implements API query manipulate system processes. code based psutil Python package. Installation Supported platforms Listing processes Query functions Process manipulation Finished zombie processes Pid reuse Find process name Wait process finish Wait several processes finish Kill process tree Filtering sorting processes Code Conduct License","code":""},{"path":"https://ps.r-lib.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"List, Query, Manipulate System Processes","text":"can install released version ps CRAN : need development version, install ","code":"install.packages(\"ps\") pak::pak(\"r-lib/ps\") library(ps) library(pillar) # nicer printing of data frames"},{"path":"https://ps.r-lib.org/dev/index.html","id":"supported-platforms","dir":"","previous_headings":"","what":"Supported platforms","title":"List, Query, Manipulate System Processes","text":"ps currently supports Windows (Vista), macOS Linux systems. unsupported platforms package can installed loaded, functions fail error class \"not_implemented\".","code":""},{"path":"https://ps.r-lib.org/dev/index.html","id":"listing-all-processes","dir":"","previous_headings":"","what":"Listing all processes","title":"List, Query, Manipulate System Processes","text":"ps_pids() returns process ids system. can useful iterate processes. ps() returns data frame, data process. contains handle process, ps_handle column, can use perform queries processes.","code":"ps_pids()[1:20] ##  [1]    0    1 1125 1127 1129 1130 1133 1136 1138 1139 1144 1149 1153 1155 1156 1161 1164 1165 1166 ## [20] 1167 ps() ## # A data frame: 477 × 11 ##      pid  ppid name  username status    user  system     rss      vms created             ps_handle ##  * <int> <int> <chr> <chr>    <chr>    <dbl>   <dbl>   <dbl>    <dbl> <dttm>              <I<list>> ##  1 81068     1 mdwo… gaborcs… runni…  0.0377  0.0143  2.61e7  4.20e11 2024-09-01 09:39:46 <ps_handl> ##  2 81067     1 mdwo… gaborcs… runni…  0.0423  0.0133  2.19e7  4.20e11 2024-09-01 09:39:46 <ps_handl> ##  3 80413     1 mdwo… gaborcs… runni…  0.0717  0.0220  2.84e7  4.20e11 2024-09-01 09:39:27 <ps_handl> ##  4 80412     1 mdwo… gaborcs… runni…  0.0749  0.0241  3.00e7  4.20e11 2024-09-01 09:39:27 <ps_handl> ##  5 80366     1 mdwo… gaborcs… runni…  0.287   0.0797  3.00e7  4.20e11 2024-09-01 09:37:07 <ps_handl> ##  6 80360 69319 Goog… gaborcs… runni…  0.0462  0.0191  9.14e7  1.66e12 2024-09-01 09:37:05 <ps_handl> ##  7 80264     1 coun… root     runni… NA      NA      NA      NA       2024-09-01 09:36:10 <ps_handl> ##  8 80261     1 mdwo… gaborcs… runni…  0.300   0.0755  3.00e7  4.20e11 2024-09-01 09:35:55 <ps_handl> ##  9 78900 69319 Goog… gaborcs… runni…  2.26    0.429   1.76e8  1.66e12 2024-09-01 09:26:07 <ps_handl> ## 10 78888 69319 Goog… gaborcs… runni…  5.68    0.595   2.38e8  1.66e12 2024-09-01 09:25:57 <ps_handl> ## # ℹ 467 more rows"},{"path":"https://ps.r-lib.org/dev/index.html","id":"process-api","dir":"","previous_headings":"","what":"Process API","title":"List, Query, Manipulate System Processes","text":"short summary API. Please see documentation various methods details, particular regarding handles finished processes pid reuse. See also “Finished zombie processes” “pid reuse” . ps_handle(pid) creates process handle supplied process id. pid omitted, handle calling process returned:","code":"p <- ps_handle() p ## <ps::ps_handle> PID=56773, NAME=R, AT=2024-08-31 14:11:26.708347"},{"path":"https://ps.r-lib.org/dev/index.html","id":"query-functions","dir":"","previous_headings":"Process API","what":"Query functions","title":"List, Query, Manipulate System Processes","text":"ps_pid(p) returns pid process. ps_create_time() returns creation time process (according OS). process id creation time uniquely identify process system. ps uses make sure reports information , manipulates correct process. ps_is_running(p) returns whether p still running. handles pid reuse safely. ps_ppid(p) returns pid parent p. ps_parent(p) returns process handle parent process p. ps_name(p) returns name program p running. ps_exe(p) returns full path executable p running. ps_cmdline(p) returns command line (executable arguments) p. ps_status(p) returns status process. Possible values OS dependent, typically \"running\" \"stopped\". ps_username(p) returns name user process belongs . ps_uids(p) ps_gids(p) return real, effective saved user ids process. implemented POSIX systems. ps_cwd(p) returns current working directory process. ps_terminal(p) returns name terminal process, . processes without terminal, Windows returns NA_character_. ps_environ(p) returns environment variables process. ps_environ_raw(p) , different form. Typically reflect environment variables start process. ps_num_threads(p) returns current number threads process. ps_cpu_times(p) returns CPU times process, similarly proc.time(). ps_memory_info(p) returns memory usage information. See manual details. ps_children(p) lists child processes (potentially recursively) current process. ps_num_fds(p) returns number open file descriptors (handles Windows): ps_open_files(p) lists open files:","code":"ps_pid(p) ## [1] 56773 ps_create_time(p) ## [1] \"2024-08-31 14:11:26 GMT\" ps_is_running(p) ## [1] TRUE ps_ppid(p) ## [1] 55975 ps_parent(p) ## <ps::ps_handle> PID=55975, NAME=zsh, AT=2024-08-29 15:04:35.020175 ps_name(p) ## [1] \"R\" ps_exe(p) ## [1] \"/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/bin/exec/R\" ps_cmdline(p) ## [1] \"/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/bin/exec/R\" ps_status(p) ## [1] \"running\" ps_username(p) ## [1] \"gaborcsardi\" if (ps_os_type()[[\"POSIX\"]]) ps_uids(p) ##      real effective     saved ##       501       501       501 if (ps_os_type()[[\"POSIX\"]]) ps_gids(p) ##      real effective     saved ##        20        20        20 ps_cwd(p) ## [1] \"/Users/gaborcsardi/works/ps\" ps_terminal(p) ## [1] \"/dev/ttys015\" ps_environ(p)[c(\"TERM\", \"USER\", \"SHELL\", \"R_HOME\")] ## TERM                          xterm-256color ## USER                          gaborcsardi ## SHELL                         /bin/zsh ## R_HOME                        /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources ps_num_threads(p) ## [1] 3 ps_cpu_times(p) ##            user          system   children_user children_system ##        33.87137        15.05281              NA              NA ps_memory_info(p) ##          rss          vms      pfaults      pageins ##    255983616 423297335296      2173700          742 ps_children(ps_parent(p)) ## [[1]] ## <ps::ps_handle> PID=56773, NAME=R, AT=2024-08-31 14:11:26.708347 ## ## [[2]] ## <ps::ps_handle> PID=57966, NAME=zsh, AT=2024-08-29 15:04:37.802087 ps_num_fds(p) ## [1] 49 f <- file(tmp <- tempfile(), \"w\") ps_num_fds(p) ## [1] 50 close(f) unlink(tmp) ps_open_files(p) ## # A data frame: 3 × 2 ##       fd path ##    <int> <chr> ##  1     0 /dev/ttys015 ##  2     1 /dev/ttys015 ##  3     2 /dev/ttys015 f <- file(tmp <- tempfile(), \"w\") ps_open_files(p) ## # A data frame: 4 × 2 ##       fd path ##    <int> <chr> ##  1     0 /dev/ttys015 ##  2     1 /dev/ttys015 ##  3     2 /dev/ttys015 ##  4    45 /private/var/folders/ph/fpcmzfd16rgbbk8mxvy9m2_h0000gn/T/RtmpFPtZXU/fileddc51cac4863 close(f) unlink(tmp) ps_open_files(p) ## # A data frame: 3 × 2 ##       fd path ##    <int> <chr> ##  1     0 /dev/ttys015 ##  2     1 /dev/ttys015 ##  3     2 /dev/ttys015"},{"path":"https://ps.r-lib.org/dev/index.html","id":"process-manipulation","dir":"","previous_headings":"Process API","what":"Process manipulation","title":"List, Query, Manipulate System Processes","text":"ps_suspend(p) suspends (stops) process. POSIX sends SIGSTOP signal. Windows stops threads. ps_resume(p) resumes process. POSIX sends SIGCONT signal. Windows resumes stopped threads. ps_send_signal(p) sends signal process. implemented POSIX systems . makes effort work around pid reuse. ps_terminate(p) send SIGTERM process. POSIX systems . ps_kill(p) terminates process. Sends SIGKILL POSIX systems, uses TerminateProcess() Windows. make effort work around pid reuse. ps_interrupt(p) interrupts process. sends SIGINT signal POSIX systems, can send CTRL+C CTRL+BREAK event Windows.","code":""},{"path":"https://ps.r-lib.org/dev/index.html","id":"finished-and-zombie-processes","dir":"","previous_headings":"","what":"Finished and zombie processes","title":"List, Query, Manipulate System Processes","text":"ps handles finished Zombie processes much possible. essential ps_pid(), ps_create_time(), ps_is_running() functions format() print() methods work processes, including finished zombie processes. functions fail error class \"no_such_process\" finished processes. ps_ppid(), ps_parent(), ps_children(), ps_name(), ps_status(), ps_username(), ps_uids(), ps_gids(), ps_terminal(), ps_children() signal sending functions work properly zombie processes. functions fail \"zombie_process\" error.","code":""},{"path":"https://ps.r-lib.org/dev/index.html","id":"pid-reuse","dir":"","previous_headings":"","what":"Pid reuse","title":"List, Query, Manipulate System Processes","text":"ps functions handle pid reuse well technically possible. query functions never return information wrong process, even process finished process id re-assigned. Windows, process manipulation functions never manipulate wrong process. POSIX systems, technically impossible, possible send signal process without creating race condition. ps time window race condition small, microseconds, process need finish, OS need reuse pid within time window create problems. unlikely happen.","code":""},{"path":"https://ps.r-lib.org/dev/index.html","id":"recipes","dir":"","previous_headings":"","what":"Recipes","title":"List, Query, Manipulate System Processes","text":"spirit psutil recipes.","code":""},{"path":"https://ps.r-lib.org/dev/index.html","id":"find-process-by-name","dir":"","previous_headings":"Recipes","what":"Find process by name","title":"List, Query, Manipulate System Processes","text":"Using ps() dplyr: Without creating full table processes:","code":"library(dplyr) find_procs_by_name <- function(name) {   ps() %>%     filter(name == !!name)  %>%     pull(ps_handle) }  find_procs_by_name(\"R\") ## [[1]] ## <ps::ps_handle> PID=56773, NAME=R, AT=2024-08-31 14:11:26.708347 find_procs_by_name <- function(name) {   procs <- lapply(ps_pids(), function(p) {     tryCatch({       h <- ps_handle(p)       if (ps_name(h) == name) h else NULL },       no_such_process = function(e) NULL,       access_denied = function(e) NULL     )   })   procs[!vapply(procs, is.null, logical(1))]   }  find_procs_by_name(\"R\") ## [[1]] ## <ps::ps_handle> PID=56773, NAME=R, AT=2024-08-31 14:11:26.708347"},{"path":"https://ps.r-lib.org/dev/index.html","id":"wait-for-a-process-to-finish","dir":"","previous_headings":"Recipes","what":"Wait for a process to finish","title":"List, Query, Manipulate System Processes","text":"ps_wait(), ps 1.8.0, implements new way, efficient waiting list processes, now easy:","code":"px <- processx::process$new(\"sleep\", \"2\") p <- px$as_ps_handle() ps_wait(p, 1000) ## [1] FALSE ps_wait(p) ## [1] TRUE"},{"path":"https://ps.r-lib.org/dev/index.html","id":"wait-for-several-processes-to-finish","dir":"","previous_headings":"Recipes","what":"Wait for several processes to finish","title":"List, Query, Manipulate System Processes","text":", much simpler ps_wait(), added ps 1.8.0.","code":"px1 <- processx::process$new(\"sleep\", \"10\") px2 <- processx::process$new(\"sleep\", \"10\") px3 <- processx::process$new(\"sleep\", \"1\") px4 <- processx::process$new(\"sleep\", \"1\")  p1 <- px1$as_ps_handle() p2 <- px2$as_ps_handle() p3 <- px3$as_ps_handle() p4 <- px4$as_ps_handle()  ps_wait(list(p1, p2, p3, p4), timeout = 2000) ## [1] FALSE FALSE  TRUE  TRUE"},{"path":"https://ps.r-lib.org/dev/index.html","id":"kill-process-tree","dir":"","previous_headings":"Recipes","what":"Kill process tree","title":"List, Query, Manipulate System Processes","text":"ps 1.8.0, ps_kill() first send SIGTERM signals Unix, SIGKILL grace period, needed. Note, R IDEs, including RStudio, run multithreaded R process, threads may start processes well. reap_children() clean well, potentially causing IDE misbehave crash.","code":"kill_proc_tree <- function(pid, include_parent = TRUE, ...) {   if (pid == Sys.getpid() && include_parent) stop(\"I refuse to kill myself\")   parent <- ps_handle(pid)   children <- ps_children(parent, recursive = TRUE)   if (include_parent) children <- c(children, list(parent))   ps_kill(children, ...) }  p1 <- processx::process$new(\"sleep\", \"10\") p2 <- processx::process$new(\"sleep\", \"10\") p3 <- processx::process$new(\"sleep\", \"10\") kill_proc_tree(Sys.getpid(), include_parent = FALSE) ## [1] \"terminated\" \"terminated\" \"terminated\" \"terminated\" \"terminated\""},{"path":"https://ps.r-lib.org/dev/index.html","id":"filtering-and-sorting-processes","dir":"","previous_headings":"Recipes","what":"Filtering and sorting processes","title":"List, Query, Manipulate System Processes","text":"Process name ending “sh”: Processes owned user: Processes consuming 100MB memory: Top 3 memory consuming processes: Top 3 processes consumed CPU time:","code":"ps() %>%   filter(grepl(\"sh$\", name)) ## # A data frame: 38 × 11 ##      pid  ppid name    username status    user  system    rss     vms created             ps_handle ##    <int> <int> <chr>   <chr>    <chr>    <dbl>   <dbl>  <dbl>   <dbl> <dttm>              <I<list>> ##  1 67374     1 Report… gaborcs… runni… 0.00899 0.0148  5.47e6 4.20e11 2024-09-01 03:02:35 <ps_handl> ##  2 44801 44603 zsh     gaborcs… runni… 0.00261 0.00945 7.86e5 4.21e11 2024-08-31 09:42:36 <ps_handl> ##  3 44603 44602 zsh     gaborcs… runni… 0.155   0.0547  9.99e5 4.21e11 2024-08-31 09:42:35 <ps_handl> ##  4 24830 24631 zsh     gaborcs… runni… 0.00736 0.0332  7.86e5 4.21e11 2024-08-30 22:11:24 <ps_handl> ##  5 24631 24630 zsh     gaborcs… runni… 0.333   0.134   9.67e5 4.21e11 2024-08-30 22:11:24 <ps_handl> ##  6 58680 55972 zsh     gaborcs… runni… 0.168   0.651   9.34e5 4.21e11 2024-08-29 15:04:39 <ps_handl> ##  7 58570 55971 zsh     gaborcs… runni… 0.0186  0.0693  2.38e6 4.21e11 2024-08-29 15:04:39 <ps_handl> ##  8 58509 55974 zsh     gaborcs… runni… 0.00364 0.0117  7.54e5 4.21e11 2024-08-29 15:04:38 <ps_handl> ##  9 58474 55964 zsh     gaborcs… runni… 0.00367 0.00942 7.54e5 4.21e11 2024-08-29 15:04:38 <ps_handl> ## 10 58437 55966 zsh     gaborcs… runni… 0.00341 0.00986 7.54e5 4.21e11 2024-08-29 15:04:38 <ps_handl> ## # ℹ 28 more rows ps() %>%   filter(username == Sys.info()[[\"user\"]]) %>%   select(pid, name) ## # A data frame: 286 × 2 ##      pid name ##    <int> <chr> ##  1 81199 Google Chrome Helper (Renderer) ##  2 81198 Google Chrome Helper (Renderer) ##  3 81197 Google Chrome Helper (Renderer) ##  4 81068 mdworker_shared ##  5 81067 mdworker_shared ##  6 80413 mdworker_shared ##  7 80412 mdworker_shared ##  8 80366 mdworker_shared ##  9 80360 Google Chrome Helper (Renderer) ## 10 80261 mdworker_shared ## # ℹ 276 more rows ps() %>%   filter(rss > 100 * 1024 * 1024) ## # A data frame: 29 × 11 ##      pid  ppid name    username status    user  system    rss     vms created             ps_handle ##    <int> <int> <chr>   <chr>    <chr>    <dbl>   <dbl>  <dbl>   <dbl> <dttm>              <I<list>> ##  1 81199 69319 Google… gaborcs… runni…  0.0412  0.0162 1.07e8 1.66e12 2024-09-01 09:39:54 <ps_handl> ##  2 81198 69319 Google… gaborcs… runni…  0.0704  0.0242 1.22e8 1.66e12 2024-09-01 09:39:53 <ps_handl> ##  3 81197 69319 Google… gaborcs… runni…  1.23    0.565  3.12e8 1.66e12 2024-09-01 09:39:53 <ps_handl> ##  4 78900 69319 Google… gaborcs… runni…  2.27    0.430  1.76e8 1.66e12 2024-09-01 09:26:07 <ps_handl> ##  5 78888 69319 Google… gaborcs… runni…  5.68    0.596  2.38e8 1.66e12 2024-09-01 09:25:57 <ps_handl> ##  6 76222 69319 Google… gaborcs… runni… 34.6     2.86   2.22e8 1.66e12 2024-09-01 09:17:46 <ps_handl> ##  7 74007 69319 Google… gaborcs… runni…  6.59    1.08   1.46e8 1.66e12 2024-09-01 08:37:02 <ps_handl> ##  8 73963 69319 Google… gaborcs… runni…  7.16    0.987  1.86e8 1.66e12 2024-09-01 08:34:37 <ps_handl> ##  9 73601 69319 Google… gaborcs… runni… 98.1    19.2    1.94e8 1.66e12 2024-09-01 07:54:27 <ps_handl> ## 10 69386 69319 Google… gaborcs… runni…  1.38    0.244  1.09e8 1.66e12 2024-09-01 07:06:19 <ps_handl> ## # ℹ 19 more rows ps() %>%   top_n(3, rss) %>%   arrange(desc(rss)) ## # A data frame: 3 × 11 ##     pid  ppid name       username status   user system    rss     vms created             ps_handle ##   <int> <int> <chr>      <chr>    <chr>   <dbl>  <dbl>  <dbl>   <dbl> <dttm>              <I<list>> ## 1 64110     1 com.apple… gaborcs… runni… 68283. 7992.  7.39e8 4.29e11 2024-07-17 08:14:51 <ps_handl> ## 2 56754 56683 ark        gaborcs… runni…   813.  112.  5.66e8 4.22e11 2024-08-29 15:04:36 <ps_handl> ## 3 69319     1 Google Ch… gaborcs… runni…   280.   86.9 5.63e8 4.56e11 2024-09-01 07:06:06 <ps_handl> ps() %>%   mutate(cpu_time = user + system) %>%   top_n(3, cpu_time) %>%   arrange(desc(cpu_time)) %>%   select(pid, name, cpu_time) ## # A data frame: 3 × 3 ##     pid name                                    cpu_time ##   <int> <chr>                                      <dbl> ## 1 64110 com.apple.Virtualization.VirtualMachine   76275. ## 2  3525 Dato                                      12825. ## 3  2617 CursorUIViewService                        6700."},{"path":"https://ps.r-lib.org/dev/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"List, Query, Manipulate System Processes","text":"Please note ps project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://ps.r-lib.org/dev/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"List, Query, Manipulate System Processes","text":"MIT © RStudio","code":""},{"path":"https://ps.r-lib.org/dev/reference/CleanupReporter.html","id":null,"dir":"Reference","previous_headings":"","what":"testthat reporter that checks if child processes are cleaned up in tests — CleanupReporter","title":"testthat reporter that checks if child processes are cleaned up in tests — CleanupReporter","text":"CleanupReporter takes existing testthat Reporter object, wraps , checks leftover child processes, specified place, see proc_unit argument .","code":""},{"path":"https://ps.r-lib.org/dev/reference/CleanupReporter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"testthat reporter that checks if child processes are cleaned up in tests — CleanupReporter","text":"","code":"CleanupReporter(reporter = testthat::ProgressReporter)"},{"path":"https://ps.r-lib.org/dev/reference/CleanupReporter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"testthat reporter that checks if child processes are cleaned up in tests — CleanupReporter","text":"reporter testthat reporter wrap new CleanupReporter class.","code":""},{"path":"https://ps.r-lib.org/dev/reference/CleanupReporter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"testthat reporter that checks if child processes are cleaned up in tests — CleanupReporter","text":"New reporter class behaves exactly like reporter, checks , optionally cleans child processes, specified granularity.","code":""},{"path":"https://ps.r-lib.org/dev/reference/CleanupReporter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"testthat reporter that checks if child processes are cleaned up in tests — CleanupReporter","text":"Child processes can reported via failed expectation, cleaned silently, cleaned reported (default). test_that() block error, CLeanupReporter emit expectations end block. error lead test failure anyway. still perform cleanup, requested, however. constructor CleanupReporter class options: file: output file, , passed reporter. proc_unit: perform child process check cleanup. Possible values: \"test\": end testthat::test_that() block (default), \"testsuite\": end test suite. proc_cleanup: Logical scalar, whether kill leftover processes, TRUE default. proc_fail: Whether create expectation, fails processes alive, TRUE default. proc_timeout: long wait processes quit. sometimes needed, even kill signals sent child processes, might take short time take effect. defaults one second. rconn_unit: perform R connection cleanup. Possible values \"test\" \"testsuite\", like proc_unit. rconn_cleanup: Logical scalar, whether clean leftover R connections. TRUE default. rconn_fail: Whether fail leftover R connections. TRUE default. file_unit: check open files. Possible values \"test\" \"testsuite\", like proc_unit. file_fail: Whether fail leftover open files. TRUE default. conn_unit: check open network connections. Possible values \"test\" \"testsuite\", like proc_unit. conn_fail: Whether fail leftover network connections. TRUE default.","code":""},{"path":"https://ps.r-lib.org/dev/reference/CleanupReporter.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"testthat reporter that checks if child processes are cleaned up in tests — CleanupReporter","text":"IDEs, like RStudio, start child processes frequently, sometimes crash killed, use reporter terminal session. particular, can always use idiomatic testthat.R file, calls test_check() R CMD check.","code":""},{"path":"https://ps.r-lib.org/dev/reference/CleanupReporter.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"testthat reporter that checks if child processes are cleaned up in tests — CleanupReporter","text":"use reporter testthat.R:","code":"library(testthat) library(mypackage)  if  (ps::ps_is_supported()) {   reporter <- ps::CleanupReporter(testthat::ProgressReporter)$new(     proc_unit = \"test\", proc_cleanup = TRUE) } else {   ## ps does not support this platform   reporter <- \"progress\" }  test_check(\"mypackage\", reporter = reporter)"},{"path":"https://ps.r-lib.org/dev/reference/errno.html","id":null,"dir":"Reference","previous_headings":"","what":"List of 'errno' error codes — errno","title":"List of 'errno' error codes — errno","text":"errors used current platform, value NA_integer_.","code":""},{"path":"https://ps.r-lib.org/dev/reference/errno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of 'errno' error codes — errno","text":"","code":"errno()"},{"path":"https://ps.r-lib.org/dev/reference/errno.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List of 'errno' error codes — errno","text":"data frame columns: name, value, description.","code":""},{"path":"https://ps.r-lib.org/dev/reference/errno.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of 'errno' error codes — errno","text":"","code":"errno() #> # A data frame: 156 × 3 #>    name          value description                                      #>    <chr>         <int> <chr>                                            #>  1 E2BIG             7 Arg list too long.                               #>  2 EACCES           13 Permission denied.                               #>  3 EADDRINUSE       98 Address already in use.                          #>  4 EADDRNOTAVAIL    99 Cannot assign requested address.                 #>  5 EADV             68 Advertise error.                                 #>  6 EAFNOSUPPORT     97 Address family not supported by protocol family. #>  7 EAGAIN           11 Resource temporarily unavailable.                #>  8 EALREADY        114 Operation already in progress.                   #>  9 EAUTH            NA Authentication error.                            #> 10 EBACKGROUND      NA Caller not in the foreground process group       #> # ℹ 146 more rows"},{"path":"https://ps.r-lib.org/dev/reference/ps-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ps: List, Query, Manipulate System Processes — ps-package","title":"ps: List, Query, Manipulate System Processes — ps-package","text":"List, query manipulate system processes, 'Windows', 'Linux' 'macOS'.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ps: List, Query, Manipulate System Processes — ps-package","text":"Maintainer: Gábor Csárdi csardi.gabor@gmail.com Authors: Jay Loden Dave Daeschler Giampaolo Rodola' contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps.html","id":null,"dir":"Reference","previous_headings":"","what":"Process table — ps","title":"Process table — ps","text":"Data frame currently running processes.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process table — ps","text":"","code":"ps(user = NULL, after = NULL, columns = NULL)"},{"path":"https://ps.r-lib.org/dev/reference/ps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process table — ps","text":"user Username, filter results matching processes. Start time (POSIXt), filter results processes started . columns Columns include result. NULL (default), default set columns returned, see . columns shown order specified columns, column included . Use \"*\" include possible columns, prefix column name - remove .","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process table — ps","text":"Data frame, see columns .","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process table — ps","text":"Columns shown default, columns given NULL: pid: Process ID. ppid: Process ID parent process. name: Process name. username: Name user (real uid POSIX). status: .e. running, sleeping, etc. user: User CPU time. system: System CPU time. rss: Resident set size, amount memory process currently uses. include memory swapped . include shared libraries. vms: Virtual memory size. memory process access . created: Time stamp process created. ps_handle: ps_handle objects, list column. Additional columns can requested via columns: cmdline: Command line, single string, ps_cmdline(). vcmdline: Like cmdline, command line argument separate string. cwd: Current working directory, ps_cwd(). exe: Path executable process, ps_exe(). num_fds: Number open file descriptors, ps_num_fds(). num_threads: Number threads, ps_num_threads(). cpu_children_user: See ps_cpu_times(). cpu_children_system: See ps_cpu_times(). terminal: Terminal device, ps_terminal(). uid_real: Real user id, ps_uids(). uid_effective: Effective user id, ps_uids(). uid_saved: Saved user id, ps_uids(). gid_real: Real group id, ps_gids(). gid_effective: Effective group id, ps_gids(). gid_saved: Saved group id, ps_gids(). mem_shared: See ps_memory_info(). mem_text: See ps_memory_info(). mem_data: See ps_memory_info(). mem_lib: See ps_memory_info(). mem_dirty: See ps_memory_info(). mem_pfaults: See ps_memory_info(). mem_pageins: See ps_memory_info(). mem_maxrss: See ps_memory_full_info(). mem_uss: See ps_memory_full_info(). mem_pss: See ps_memory_full_info(). mem_swap: See ps_memory_full_info(). Use \"*\" columns include columns.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_apps.html","id":null,"dir":"Reference","previous_headings":"","what":"List currently running applications — ps_apps","title":"List currently running applications — ps_apps","text":"function currently works macOS.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_apps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List currently running applications — ps_apps","text":"","code":"ps_apps()"},{"path":"https://ps.r-lib.org/dev/reference/ps_apps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List currently running applications — ps_apps","text":"data frame columns: pid: integer process id. name: process name. bundle_identifier: bundle identifier, e.g. com.apple.dock. bundle_url: bundle URL, file:// URL app bundle. arch: executable architecture, possible values arm64, i386, x86_64, ppc, ppc64. executable_url: file:// URL executable file. launch_date: launch time stamp, POSIXct object, may NA. finished_launching: whether app finished launching. active: whether app active. activation_policy: one following values: regular: application ordinary app appears Dock may user interface. accessory: application doesn’t appear Dock doesn’t menu bar, may activated programmatically clicking one windows. prohibited: application doesn’t appear Dock may create windows activated.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_apps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List currently running applications — ps_apps","text":"","code":"if (FALSE) { # ps_is_supported() && ps_os_type()[[\"MACOS\"]] && !ps:::is_cran_check() ps_apps() }"},{"path":"https://ps.r-lib.org/dev/reference/ps_boot_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Boot time of the system — ps_boot_time","title":"Boot time of the system — ps_boot_time","text":"Boot time system","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_boot_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boot time of the system — ps_boot_time","text":"","code":"ps_boot_time()"},{"path":"https://ps.r-lib.org/dev/reference/ps_boot_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boot time of the system — ps_boot_time","text":"POSIXct object.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_children.html","id":null,"dir":"Reference","previous_headings":"","what":"List of child processes (process objects) of the process. Note that this typically requires enumerating all processes on the system, so it is a costly operation. — ps_children","title":"List of child processes (process objects) of the process. Note that this typically requires enumerating all processes on the system, so it is a costly operation. — ps_children","text":"List child processes (process objects) process. Note typically requires enumerating processes system, costly operation.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_children.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of child processes (process objects) of the process. Note that this typically requires enumerating all processes on the system, so it is a costly operation. — ps_children","text":"","code":"ps_children(p = ps_handle(), recursive = FALSE)"},{"path":"https://ps.r-lib.org/dev/reference/ps_children.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of child processes (process objects) of the process. Note that this typically requires enumerating all processes on the system, so it is a costly operation. — ps_children","text":"p Process handle. recursive Whether include children children, etc.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_children.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of child processes (process objects) of the process. Note that this typically requires enumerating all processes on the system, so it is a costly operation. — ps_children","text":"List ps_handle objects.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_children.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of child processes (process objects) of the process. Note that this typically requires enumerating all processes on the system, so it is a costly operation. — ps_children","text":"","code":"p <- ps_parent(ps_handle()) ps_children(p) #> [[1]] #> <ps::ps_handle> PID=7270, NAME=R, AT=2025-04-12 09:00:16.36 #>"},{"path":"https://ps.r-lib.org/dev/reference/ps_cmdline.html","id":null,"dir":"Reference","previous_headings":"","what":"Command line of the process — ps_cmdline","title":"Command line of the process — ps_cmdline","text":"Command line process, .e. executable command line arguments, character vector. Unix program might change command line, programs actually .","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_cmdline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Command line of the process — ps_cmdline","text":"","code":"ps_cmdline(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_cmdline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Command line of the process — ps_cmdline","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_cmdline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Command line of the process — ps_cmdline","text":"Character vector.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_cmdline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Command line of the process — ps_cmdline","text":"zombie process throws zombie_process error.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_cmdline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Command line of the process — ps_cmdline","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=7270, NAME=R, AT=2025-04-12 09:00:16.36 ps_name(p) #> [1] \"R\" ps_exe(p) #> [1] \"/opt/R/4.5.0/lib/R/bin/exec/R\" ps_cmdline(p) #> [1] \"/opt/R/4.5.0/lib/R/bin/exec/R\"                                       #> [2] \"--no-echo\"                                                           #> [3] \"--no-restore\"                                                        #> [4] \"--file=/home/runner/work/_temp/4d20021c-34a8-44e6-9cde-c85d52011f4f\""},{"path":"https://ps.r-lib.org/dev/reference/ps_connections.html","id":null,"dir":"Reference","previous_headings":"","what":"List network connections of a process — ps_connections","title":"List network connections of a process — ps_connections","text":"zombie process throws zombie_process error.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_connections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List network connections of a process — ps_connections","text":"","code":"ps_connections(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_connections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List network connections of a process — ps_connections","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_connections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List network connections of a process — ps_connections","text":"Data frame, columns: fd: integer file descriptor POSIX systems, NA Windows. family: Address family, string, typically AF_UNIX, AF_INET AF_INET6. type: Socket type, string, typically SOCK_STREAM (TCP) SOCK_DGRAM (UDP). laddr: Local address, string, NA UNIX sockets. lport: Local port, integer, NA UNIX sockets. raddr: Remote address, string, NA UNIX sockets. always NA AF_INET sockets Linux. rport: Remote port, integer, NA UNIX sockets. state: Socket state, e.g. CONN_ESTABLISHED, etc. NA UNIX sockets.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_connections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List network connections of a process — ps_connections","text":"","code":"p <- ps_handle() ps_connections(p) #> # A data frame: 4 × 8 #>      fd family  type        laddr      lport raddr          rport state #>   <int> <chr>   <chr>       <chr>      <int> <chr>          <int> <chr> #> 1    14 AF_INET SOCK_STREAM 10.1.0.110 37470 172.253.115.94   443 CONN… #> 2    12 AF_INET SOCK_STREAM 10.1.0.110 39086 65.8.19.125      443 CONN… #> 3    13 AF_INET SOCK_STREAM 10.1.0.110 57264 142.251.167.95   443 CONN… #> 4    15 AF_INET SOCK_STREAM 10.1.0.110 38720 65.8.19.120       80 CONN… sc <- socketConnection(\"httpbin.org\", port = 80) ps_connections(p) #> # A data frame: 5 × 8 #>      fd family  type        laddr      lport raddr          rport state #>   <int> <chr>   <chr>       <chr>      <int> <chr>          <int> <chr> #> 1    14 AF_INET SOCK_STREAM 10.1.0.110 37470 172.253.115.94   443 CONN… #> 2    17 AF_INET SOCK_STREAM 10.1.0.110 43098 34.238.6.191      80 CONN… #> 3    12 AF_INET SOCK_STREAM 10.1.0.110 39086 65.8.19.125      443 CONN… #> 4    13 AF_INET SOCK_STREAM 10.1.0.110 57264 142.251.167.95   443 CONN… #> 5    15 AF_INET SOCK_STREAM 10.1.0.110 38720 65.8.19.120       80 CONN… close(sc) ps_connections(p) #> # A data frame: 4 × 8 #>      fd family  type        laddr      lport raddr          rport state #>   <int> <chr>   <chr>       <chr>      <int> <chr>          <int> <chr> #> 1    14 AF_INET SOCK_STREAM 10.1.0.110 37470 172.253.115.94   443 CONN… #> 2    12 AF_INET SOCK_STREAM 10.1.0.110 39086 65.8.19.125      443 CONN… #> 3    13 AF_INET SOCK_STREAM 10.1.0.110 57264 142.251.167.95   443 CONN… #> 4    15 AF_INET SOCK_STREAM 10.1.0.110 38720 65.8.19.120       80 CONN…"},{"path":"https://ps.r-lib.org/dev/reference/ps_cpu_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of logical or physical CPUs — ps_cpu_count","title":"Number of logical or physical CPUs — ps_cpu_count","text":"determined, returns NA. also returns NA older Windows systems, e.g. Vista older Windows Server 2008 older.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_cpu_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of logical or physical CPUs — ps_cpu_count","text":"","code":"ps_cpu_count(logical = TRUE)"},{"path":"https://ps.r-lib.org/dev/reference/ps_cpu_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of logical or physical CPUs — ps_cpu_count","text":"logical Whether count logical CPUs.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_cpu_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of logical or physical CPUs — ps_cpu_count","text":"Integer scalar.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_cpu_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of logical or physical CPUs — ps_cpu_count","text":"","code":"ps_cpu_count(logical = TRUE) #> [1] 4 ps_cpu_count(logical = FALSE) #> [1] 2"},{"path":"https://ps.r-lib.org/dev/reference/ps_cpu_times.html","id":null,"dir":"Reference","previous_headings":"","what":"CPU times of the process — ps_cpu_times","title":"CPU times of the process — ps_cpu_times","text":"times measured seconds: user: Amount time process scheduled user mode. system: Amount time process scheduled kernel mode children_user: Linux, amount time process's waited-children scheduled user mode. children_system: Linux, Amount time process's waited-children scheduled kernel mode.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_cpu_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CPU times of the process — ps_cpu_times","text":"","code":"ps_cpu_times(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_cpu_times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CPU times of the process — ps_cpu_times","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_cpu_times.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CPU times of the process — ps_cpu_times","text":"Named real vector length four: user, system, children_user,  children_system. last two NA non-Linux systems.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_cpu_times.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CPU times of the process — ps_cpu_times","text":"Throws zombie_process() error zombie processes.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_cpu_times.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CPU times of the process — ps_cpu_times","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=7270, NAME=R, AT=2025-04-12 09:00:16.36 ps_cpu_times(p) #>            user          system   children_user children_system  #>            6.63            0.66            1.01            0.96  proc.time() #>    user  system elapsed  #>   7.650   1.633  11.124"},{"path":"https://ps.r-lib.org/dev/reference/ps_create_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Start time of a process — ps_create_time","title":"Start time of a process — ps_create_time","text":"pid start time pair serves identifier process, process ids might reused, chance starting two processes identical ids within resolution timer minimal.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_create_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start time of a process — ps_create_time","text":"","code":"ps_create_time(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_create_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start time of a process — ps_create_time","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_create_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start time of a process — ps_create_time","text":"POSIXct object, start time, GMT.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_create_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Start time of a process — ps_create_time","text":"function works even process already finished.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_create_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Start time of a process — ps_create_time","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=7270, NAME=R, AT=2025-04-12 09:00:16.36 ps_create_time(p) #> [1] \"2025-04-12 09:00:16 GMT\""},{"path":"https://ps.r-lib.org/dev/reference/ps_cwd.html","id":null,"dir":"Reference","previous_headings":"","what":"Process current working directory as an absolute path. — ps_cwd","title":"Process current working directory as an absolute path. — ps_cwd","text":"zombie process throws zombie_process error.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_cwd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process current working directory as an absolute path. — ps_cwd","text":"","code":"ps_cwd(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_cwd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process current working directory as an absolute path. — ps_cwd","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_cwd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process current working directory as an absolute path. — ps_cwd","text":"String scalar.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_cwd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process current working directory as an absolute path. — ps_cwd","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=7270, NAME=R, AT=2025-04-12 09:00:16.36 ps_cwd(p) #> [1] \"/home/runner/work/ps/ps/docs/dev/reference\""},{"path":"https://ps.r-lib.org/dev/reference/ps_descent.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the ancestry of a process — ps_descent","title":"Query the ancestry of a process — ps_descent","text":"Query parent processes recursively, first process. (platforms, like Windows, process tree tree may contain loops, case ps_descent() goes first repetition.)","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_descent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the ancestry of a process — ps_descent","text":"","code":"ps_descent(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_descent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query the ancestry of a process — ps_descent","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_descent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query the ancestry of a process — ps_descent","text":"list process handles, starting p, one parent process previous one.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_descent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query the ancestry of a process — ps_descent","text":"","code":"ps_descent() #> [[1]] #> <ps::ps_handle> PID=7270, NAME=R, AT=2025-04-12 09:00:16.36 #>  #> [[2]] #> <ps::ps_handle> PID=1735, NAME=Runner.Worker, AT=2025-04-12 08:59:03.72 #>  #> [[3]] #> <ps::ps_handle> PID=1718, NAME=Runner.Listener, AT=2025-04-12 08:59:02.39 #>  #> [[4]] #> <ps::ps_handle> PID=836, NAME=provisioner, AT=2025-04-12 08:56:45.16 #>  #> [[5]] #> <ps::ps_handle> PID=1, NAME=systemd, AT=2025-04-12 08:56:36.44 #>"},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_io_counters.html","id":null,"dir":"Reference","previous_headings":"","what":"System-wide disk I/O counters — ps_disk_io_counters","title":"System-wide disk I/O counters — ps_disk_io_counters","text":"Returns data.frame system-wide disk /O counters.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_io_counters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"System-wide disk I/O counters — ps_disk_io_counters","text":"","code":"ps_disk_io_counters()"},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_io_counters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"System-wide disk I/O counters — ps_disk_io_counters","text":"data frame one row per disk /O stats, columns name, read_count read_merged_count read_bytes, read_time, write_count, write_merged_count, write_bytes write_time, busy_time.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_io_counters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"System-wide disk I/O counters — ps_disk_io_counters","text":"Includes following non-NA fields supported platforms: read_count: number reads write_count: number writes read_bytes: number bytes read write_bytes: number bytes written platforms: read_time: time spent reading disk (milliseconds) write_time: time spent writing disk (milliseconds) busy_time: time spent actual /Os (milliseconds) read_merged_count: number merged reads (see iostats doc) write_merged_count: number merged writes (see iostats doc)","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_io_counters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"System-wide disk I/O counters — ps_disk_io_counters","text":"","code":"ps_disk_io_counters() #> # A data frame: 15 × 10 #>    name  read_count read_merged_count read_bytes read_time write_count #>    <chr>      <dbl>             <dbl>      <dbl>     <dbl>       <dbl> #>  1 loop0          0                28          0         0           0 #>  2 loop1          0                 0          0         0           0 #>  3 loop2          0                 0          0         0           0 #>  4 loop3          0                 0          0         0           0 #>  5 loop4          0                 0          0         0           0 #>  6 loop5          0                 0          0         0           0 #>  7 loop6          0                 0          0         0           0 #>  8 loop7          0                 0          0         0           0 #>  9 sda        17044           2304613    3440640     29512       79083 #> 10 sda1       16344           2270359    3403776     29487       79058 #> 11 sda14          0              1264       5632         0           0 #> 12 sda15        666             17742      13312         2           0 #> 13 sda16         34             13280      13312        23          25 #> 14 sdb            9             25698      64512      5417        1261 #> 15 sdb1           9             23242      58368      5417        1261 #> # ℹ 4 more variables: write_merged_count <dbl>, write_bytes <dbl>, #> #   write_time <dbl>, busy_time <dbl>"},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_partitions.html","id":null,"dir":"Reference","previous_headings":"","what":"List all mounted partitions — ps_disk_partitions","title":"List all mounted partitions — ps_disk_partitions","text":"output similar Unix mount df commands.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_partitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all mounted partitions — ps_disk_partitions","text":"","code":"ps_disk_partitions(all = FALSE)"},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_partitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all mounted partitions — ps_disk_partitions","text":"Whether list virtual devices well. FALSE, Linux still list overlay grpcfuse file systems, provide useful information Docker containers.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_partitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all mounted partitions — ps_disk_partitions","text":"data frame columns device, mountpoint, fstype options.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_partitions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all mounted partitions — ps_disk_partitions","text":"","code":"ps_disk_partitions(all = TRUE) #> # A data frame: 24 × 4 #>    device     mountpoint           fstype     options                   #>    <chr>      <chr>                <chr>      <chr>                     #>  1 /dev/root  /                    ext4       rw,relatime,discard,erro… #>  2 devtmpfs   /dev                 devtmpfs   rw,nosuid,noexec,relatim… #>  3 proc       /proc                proc       rw,nosuid,nodev,noexec,r… #>  4 sysfs      /sys                 sysfs      rw,nosuid,nodev,noexec,r… #>  5 securityfs /sys/kernel/security securityfs rw,nosuid,nodev,noexec,r… #>  6 tmpfs      /dev/shm             tmpfs      rw,nosuid,nodev,inode64   #>  7 devpts     /dev/pts             devpts     rw,nosuid,noexec,relatim… #>  8 tmpfs      /run                 tmpfs      rw,nosuid,nodev,size=327… #>  9 tmpfs      /run/lock            tmpfs      rw,nosuid,nodev,noexec,r… #> 10 cgroup2    /sys/fs/cgroup       cgroup2    rw,nosuid,nodev,noexec,r… #> # ℹ 14 more rows ps_disk_partitions() #> # A data frame: 4 × 4 #>   device     mountpoint fstype options                                  #> * <chr>      <chr>      <chr>  <chr>                                    #> 1 /dev/root  /          ext4   rw,relatime,discard,errors=remount-ro,c… #> 2 /dev/sda16 /boot      ext4   rw,relatime,discard                      #> 3 /dev/sda15 /boot/efi  vfat   rw,relatime,fmask=0077,dmask=0077,codep… #> 4 /dev/sdb1  /mnt       ext4   rw,relatime"},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_usage.html","id":null,"dir":"Reference","previous_headings":"","what":"Disk usage statistics, per partition — ps_disk_usage","title":"Disk usage statistics, per partition — ps_disk_usage","text":"output similar Unix df command.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_usage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Disk usage statistics, per partition — ps_disk_usage","text":"","code":"ps_disk_usage(paths = ps_disk_partitions()$mountpoint)"},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_usage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Disk usage statistics, per partition — ps_disk_usage","text":"paths mounted file systems list. default file systems returned ps_disk_partitions() listed.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_usage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Disk usage statistics, per partition — ps_disk_usage","text":"data frame columns mountpoint, total, used, available capacity.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_usage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Disk usage statistics, per partition — ps_disk_usage","text":"Note Unix small percentage disk space (5% typically) reserved superuser. ps_disk_usage() returns space available calling user.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_disk_usage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Disk usage statistics, per partition — ps_disk_usage","text":"","code":"ps_disk_usage() #> # A data frame: 4 × 5 #>   mountpoint       total        used   available capacity #>   <chr>            <dbl>       <dbl>       <dbl>    <dbl> #> 1 /          76887154688 52357558272 24546373632   0.681  #> 2 /boot        923156480   126009344   861790208   0.128  #> 3 /boot/efi    109395456     6395392   103000064   0.0585 #> 4 /mnt       78673350656  8338202624 74378350592   0.101"},{"path":"https://ps.r-lib.org/dev/reference/ps_environ.html","id":null,"dir":"Reference","previous_headings":"","what":"Environment variables of a process — ps_environ","title":"Environment variables of a process — ps_environ","text":"ps_environ() returns environment variables process, named vector, similarly return value Sys.getenv() (without arguments).","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_environ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Environment variables of a process — ps_environ","text":"","code":"ps_environ(p = ps_handle())  ps_environ_raw(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_environ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Environment variables of a process — ps_environ","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_environ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Environment variables of a process — ps_environ","text":"ps_environ() returns named character vector (Dlist class, printed nicely), ps_environ_raw() returns character vector.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_environ.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Environment variables of a process — ps_environ","text":"Note: usually reflect changes made process started. ps_environ_raw() similar p$environ() returns unparsed \"var=value\" strings. faster, sometimes good enough. functions throw zombie_process error zombie processes.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_environ.html","id":"macos-issues","dir":"Reference","previous_headings":"","what":"macOS issues","title":"Environment variables of a process — ps_environ","text":"ps_environ() usually work macOS nowadays. macOS allow reading environment variables another process. Accoding Darwin source code, ps_environ work one conditions hold: running development debug kernel, .e. debugging macOS kernel . target process calling process. SIP . target process restricted, e.g. running binary signed. calling process com.apple.private.read-environment-variables entitlement. However adding entitlement R binary makes R crash startup. Otherwise ps_environ return empty set environment variables macOS. Issue 121 might information .","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_environ.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Environment variables of a process — ps_environ","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=7270, NAME=R, AT=2025-04-12 09:00:16.36 env <- ps_environ(p) env[[\"R_HOME\"]] #> [1] \"/opt/R/4.5.0/lib/R\""},{"path":"https://ps.r-lib.org/dev/reference/ps_exe.html","id":null,"dir":"Reference","previous_headings":"","what":"Full path of the executable of a process — ps_exe","title":"Full path of the executable of a process — ps_exe","text":"Path executable process. May also empty string NA determined.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_exe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Full path of the executable of a process — ps_exe","text":"","code":"ps_exe(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_exe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Full path of the executable of a process — ps_exe","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_exe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Full path of the executable of a process — ps_exe","text":"Character scalar.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_exe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Full path of the executable of a process — ps_exe","text":"zombie process throws zombie_process error.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_exe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Full path of the executable of a process — ps_exe","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=7270, NAME=R, AT=2025-04-12 09:00:16.36 ps_name(p) #> [1] \"R\" ps_exe(p) #> [1] \"/opt/R/4.5.0/lib/R/bin/exec/R\" ps_cmdline(p) #> [1] \"/opt/R/4.5.0/lib/R/bin/exec/R\"                                       #> [2] \"--no-echo\"                                                           #> [3] \"--no-restore\"                                                        #> [4] \"--file=/home/runner/work/_temp/4d20021c-34a8-44e6-9cde-c85d52011f4f\""},{"path":"https://ps.r-lib.org/dev/reference/ps_fs_info.html","id":null,"dir":"Reference","previous_headings":"","what":"File system information for files — ps_fs_info","title":"File system information for files — ps_fs_info","text":"File system information files","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_fs_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File system information for files — ps_fs_info","text":"","code":"ps_fs_info(paths = \"/\")"},{"path":"https://ps.r-lib.org/dev/reference/ps_fs_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File system information for files — ps_fs_info","text":"paths path vector paths. ps_fs_info() returns information file systems paths. path may contain direcories well.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_fs_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"File system information for files — ps_fs_info","text":"Data frame file system information path paths, one row per path. Common columns operating systems: path: input paths, .e. paths argument. mountpoint: Directory file system mounted. Linux small chance possible look , NA_character_. drive letter mount directory Windows, trailing \\. name: Device name. Linux small chance possible look , NA_character_. Windows volume GUID path form \\\\?\\Volume{GUID}\\. type: File system type (character). Linux tiny chance possible look , NA_character_. block_size: File system block size. sector size Windows, bytes. transfer_block_size: Pptimal transfer block size. Linux currently always block_size. cluster size Windows, bytes. total_data_blocks: Total data blocks file system. Windows number sectors. free_blocks: Free blocks file system. Windows number free sectors. free_blocks_non_superuser: Free blocks non-superuser, might different Unix. Windows number free sectors calling user. id: File system id. raw vector. Linux often zeros. always NULL Windows. owner: User mounted file system. Linux Windows currently always NA_real_. type_code: Type file system, numeric code. Windows NA_real_. subtype_code: File system subtype (flavor). Linux Windows always NA_real_. rest columns flags, operating system dependent. macOS: RDONLY: read-filesystem. SYNCHRONOUS: File system written synchronously. NOEXEC: exec filesystem. NOSUID: Setuid bits honored filesystem. NODEV: interpret special files. UNION: Union underlying filesysten. ASYNC: File system written asynchronously. EXPORTED: File system exported. LOCAL: File system stored locally. QUOTA: Quotas enabled file system. ROOTFS: file system root file system. DOVOLFS: File system supports volfs. DONTBROWSE: File system appropriate path user data. UNKNOWNPERMISSIONS:  VFS ignore ownership information filesystem filesystemtem objects. AUTOMOUNTED: File system mounted automounter. JOURNALED: File system journaled. DEFWRITE: File system defer writes. MULTILABEL: MAC support individual labels. CPROTECT: File system supports per-file encrypted data protection. Linux: MANDLOCK: Mandatory locking permitted filesystem (see fcntl(2)). NOATIME: update access times; see mount(2). NODEV: Disallow access device special files filesystem. NODIRATIME: update directory access times; see mount(2). NOEXEC: Execution programs disallowed filesystem. NOSUID: set-user-ID set-group-ID bits ignored exec(3) executable files filesystem RDONLY: filesystem mounted read-. RELATIME: Update atime relative mtime/ctime; see mount(2). SYNCHRONOUS: Writes synched filesystem immediately (see description O_SYNC `open(2)“). NOSYMFOLLOW: Symbolic links followed resolving paths; see `mount(2)“. Windows: CASE_SENSITIVE_SEARCH: Supports case-sensitive file names. CASE_PRESERVED_NAMES: Supports preserved case file names places name disk. UNICODE_ON_DISK: Supports Unicode file names appear disk. PERSISTENT_ACLS: Preserves enforces access control lists (ACL). example, NTFS file system preserves enforces ACLs, FAT file system . FILE_COMPRESSION: Supports file-based compression. VOLUME_QUOTAS: Supports disk quotas. SUPPORTS_SPARSE_FILES: Supports sparse files. SUPPORTS_REPARSE_POINTS: Supports reparse points. SUPPORTS_REMOTE_STORAGE: Supports remote storage. RETURNS_CLEANUP_RESULT_INFO: successful cleanup operation, file system returns information describes additional actions taken cleanup, deleting file. File system filters can examine information post-cleanup callback. SUPPORTS_POSIX_UNLINK_RENAME: Supports POSIX-style delete rename operations. VOLUME_IS_COMPRESSED: compressed volume, example, DoubleSpace volume. SUPPORTS_OBJECT_IDS: Supports object identifiers. SUPPORTS_ENCRYPTION: Supports Encrypted File System (EFS). NAMED_STREAMS: Supports named streams. READ_ONLY_VOLUME: read-. SEQUENTIAL_WRITE_ONCE: Supports single sequential write. SUPPORTS_TRANSACTIONS: Supports transactions. SUPPORTS_HARD_LINKS: volume supports hard links. SUPPORTS_EXTENDED_ATTRIBUTES: Supports extended attributes. SUPPORTS_OPEN_BY_FILE_ID: Supports open FileID. SUPPORTS_USN_JOURNAL: Supports update sequence number (USN) journals. SUPPORTS_INTEGRITY_STREAMS: Supports integrity streams. SUPPORTS_BLOCK_REFCOUNTING: volume supports sharing logical clusters files volume. SUPPORTS_SPARSE_VDL: file system tracks whether cluster file contains valid data (either explicit file writes automatic zeros) invalid data (yet written zeroed). DAX_VOLUME: volume direct access (DAX) volume. SUPPORTS_GHOSTING: Supports ghosting.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_fs_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"File system information for files — ps_fs_info","text":"","code":"ps_fs_info(c(\"/\", \"~\", \".\")) #> # A data frame: 3 × 25 #>   path  mountpoint name      type  block_size transfer_block_size #>   <chr> <chr>      <chr>     <chr>      <dbl>               <dbl> #> 1 /     /          /dev/root ext4        4096                4096 #> 2 ~     /          /dev/root ext4        4096                4096 #> 3 .     /          /dev/root ext4        4096                4096 #> # ℹ 19 more variables: total_data_blocks <dbl>, free_blocks <dbl>, #> #   free_blocks_non_superuser <dbl>, total_nodes <dbl>, #> #   free_nodes <dbl>, id <list>, owner <dbl>, type_code <dbl>, #> #   subtype_code <dbl>, MANDLOCK <lgl>, NOATIME <lgl>, NODEV <lgl>, #> #   NODIRATIME <lgl>, NOEXEC <lgl>, NOSUID <lgl>, RDONLY <lgl>, #> #   RELATIME <lgl>, SYNCHRONOUS <lgl>, NOSYMFOLLOW <lgl>"},{"path":"https://ps.r-lib.org/dev/reference/ps_fs_mount_point.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the mount point of a file or directory — ps_fs_mount_point","title":"Find the mount point of a file or directory — ps_fs_mount_point","text":"Find mount point file directory","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_fs_mount_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the mount point of a file or directory — ps_fs_mount_point","text":"","code":"ps_fs_mount_point(paths)"},{"path":"https://ps.r-lib.org/dev/reference/ps_fs_mount_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the mount point of a file or directory — ps_fs_mount_point","text":"paths Paths files, directories, devices, etc. must exist. normalized using base::normalizePath().","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_fs_mount_point.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the mount point of a file or directory — ps_fs_mount_point","text":"Character vector, paths mount points input paths.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_fs_mount_point.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the mount point of a file or directory — ps_fs_mount_point","text":"","code":"ps_fs_mount_point(\".\") #> [1] \"/\""},{"path":"https://ps.r-lib.org/dev/reference/ps_fs_stat.html","id":null,"dir":"Reference","previous_headings":"","what":"File status — ps_fs_stat","title":"File status — ps_fs_stat","text":"function currently implemented Windows.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_fs_stat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File status — ps_fs_stat","text":"","code":"ps_fs_stat(paths, follow = TRUE)"},{"path":"https://ps.r-lib.org/dev/reference/ps_fs_stat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File status — ps_fs_stat","text":"paths Paths files, directories, devices, etc. must exist. expanded using base::path.expand(). follow Whether follow symbolic links. FALSE returns information links .","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_fs_stat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"File status — ps_fs_stat","text":"Data frame one row path paths. Columns: path: Expanded paths. dev_major: Major device ID device path resides . dev_minor: Minor device ID device path resodes . inode: Inode number. mode: File type mode (permissions). easier use type permissions columns. type: File type, character. One regular file, directory, character device, block device, FIFO, symbolic link, socket. permissions: Permissions, numeric code integer column. nlink: Number hard links. uid: User id owner. gid: Group id owner. rdev_major: path device, major device id, otherwise NA_integer_. rdev_minor: path device, minor device id, otherwise NA_integer_. size: File size bytes. block_size: Block size filesystem /O. blocks: Number 512B blocks allocated. access_time: Time last access. modification_time: Time last modification. change_time: Time last status change.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_fs_stat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"File status — ps_fs_stat","text":"","code":"ps_fs_stat(c(\".\", tempdir())) #> # A data frame: 2 × 18 #>   path   dev_major dev_minor  inode  mode type  permissions nlink   uid #>   <chr>      <int>     <int>  <dbl> <dbl> <chr>       <int> <dbl> <dbl> #> 1 .              8         1 790366 16877 dire…         493     2  1001 #> 2 /tmp/…         8         1 542894 16832 dire…         448     8  1001 #> # ℹ 9 more variables: gid <dbl>, rdev_major <int>, rdev_minor <int>, #> #   size <dbl>, block_size <dbl>, blocks <dbl>, access_time <dttm>, #> #   modification_time <dttm>, change_time <dttm>"},{"path":"https://ps.r-lib.org/dev/reference/ps_get_cpu_affinity.html","id":null,"dir":"Reference","previous_headings":"","what":"Query or set CPU affinity — ps_get_cpu_affinity","title":"Query or set CPU affinity — ps_get_cpu_affinity","text":"ps_get_cpu_affinity() queries CPU affinity process. ps_set_cpu_affinity() sets CPU affinity process.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_get_cpu_affinity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query or set CPU affinity — ps_get_cpu_affinity","text":"","code":"ps_get_cpu_affinity(p = ps_handle())  ps_set_cpu_affinity(p = ps_handle(), affinity)"},{"path":"https://ps.r-lib.org/dev/reference/ps_get_cpu_affinity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query or set CPU affinity — ps_get_cpu_affinity","text":"p Process handle. affinity Integer vector CPU numbers restrict process . CPU numbers start zero, smaller number (logical) CPUs, see ps_cpu_count().","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_get_cpu_affinity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query or set CPU affinity — ps_get_cpu_affinity","text":"ps_get_cpu_affinity() returns integer vector CPU numbers, starting zero. ps_set_cpu_affinity() returns NULL, invisibly.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_get_cpu_affinity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query or set CPU affinity — ps_get_cpu_affinity","text":"CPU affinity consists telling OS run process limited set CPUs (Linux cmdline, taskset command typically used). functions supported Linux Windows. error macOS.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_get_cpu_affinity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query or set CPU affinity — ps_get_cpu_affinity","text":"","code":"# current orig <- ps_get_cpu_affinity() orig #> [1] 0 1 2 3  # restrict ps_set_cpu_affinity(affinity = 0:0) ps_get_cpu_affinity() #> [1] 0  # restore ps_set_cpu_affinity(affinity = orig) ps_get_cpu_affinity() #> [1] 0 1 2 3"},{"path":"https://ps.r-lib.org/dev/reference/ps_get_nice.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the priority of a process — ps_windows_nice_values","title":"Get or set the priority of a process — ps_windows_nice_values","text":"ps_get_nice() returns current priority, ps_set_nice() sets new priority, ps_windows_nice_values() list possible priority values Windows.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_get_nice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the priority of a process — ps_windows_nice_values","text":"","code":"ps_windows_nice_values()  ps_get_nice(p = ps_handle())  ps_set_nice(p = ps_handle(), value)"},{"path":"https://ps.r-lib.org/dev/reference/ps_get_nice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the priority of a process — ps_windows_nice_values","text":"p Process handle. value Windows must string, one values ps_windows_nice_values(). Unix priority value smaller equal 20.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_get_nice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the priority of a process — ps_windows_nice_values","text":"ps_windows_nice_values() return character vector possible priority values Windows. ps_get_nice() returns string ps_windows_nice_values() Windows. Unix returns integer smaller equal 20. ps_set_nice() return NULL invisibly.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_get_nice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get or set the priority of a process — ps_windows_nice_values","text":"Priority values different Windows Unix. Unix, priority integer, maximum 20. 20 lowest priority.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_get_nice.html","id":"rules-","dir":"Reference","previous_headings":"","what":"Rules:","title":"Get or set the priority of a process — ps_windows_nice_values","text":"Windows can set priority processes current user PROCESS_SET_INFORMATION access rights . typically means processes. Unix can set priority processes. superuser can set priority process. Unix set higher priority, unless superuser. (.e. set lower number.) Unix default priority process zero.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_handle.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a process handle — ps_handle","title":"Create a process handle — ps_handle","text":"Create process handle","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_handle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a process handle — ps_handle","text":"","code":"ps_handle(pid = NULL, time = NULL)  # S3 method for class 'ps_handle' as.character(x, ...)  # S3 method for class 'ps_handle' format(x, ...)  # S3 method for class 'ps_handle' print(x, ...)"},{"path":"https://ps.r-lib.org/dev/reference/ps_handle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a process handle — ps_handle","text":"pid Process id. Integer scalar. NULL means current R process. time Start time process. Usually NULL ps query start time. x Process handle. ... used currently.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_handle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a process handle — ps_handle","text":"ps_handle() returns process handle (class ps_handle).","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_handle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a process handle — ps_handle","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=7270, NAME=R, AT=2025-04-12 09:00:16.36"},{"path":"https://ps.r-lib.org/dev/reference/ps_interrupt.html","id":null,"dir":"Reference","previous_headings":"","what":"Interrupt a process — ps_interrupt","title":"Interrupt a process — ps_interrupt","text":"Sends SIGINT POSIX, 'CTRL+C' 'CTRL+BREAK' Windows.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_interrupt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interrupt a process — ps_interrupt","text":"","code":"ps_interrupt(p = ps_handle(), ctrl_c = TRUE)"},{"path":"https://ps.r-lib.org/dev/reference/ps_interrupt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interrupt a process — ps_interrupt","text":"p Process handle list process handles. ctrl_c Windows, whether send 'CTRL+C'. FALSE, 'CTRL+BREAK' sent. Ignored non-Windows platforms.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_is_running.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether a process is running — ps_is_running","title":"Checks whether a process is running — ps_is_running","text":"returns FALSE process already finished.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_is_running.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether a process is running — ps_is_running","text":"","code":"ps_is_running(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_is_running.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether a process is running — ps_is_running","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_is_running.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether a process is running — ps_is_running","text":"Logical scalar.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_is_running.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checks whether a process is running — ps_is_running","text":"uses start time process work around pid reuse. .e.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_is_running.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks whether a process is running — ps_is_running","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=7270, NAME=R, AT=2025-04-12 09:00:16.36 ps_is_running(p) #> [1] TRUE"},{"path":"https://ps.r-lib.org/dev/reference/ps_kill.html","id":null,"dir":"Reference","previous_headings":"","what":"Kill one or more processes — ps_kill","title":"Kill one or more processes — ps_kill","text":"Kill process SIGKILL preemptively checking whether PID reused. Windows uses TerminateProcess().","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_kill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kill one or more processes — ps_kill","text":"","code":"ps_kill(p = ps_handle(), grace = 200)"},{"path":"https://ps.r-lib.org/dev/reference/ps_kill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kill one or more processes — ps_kill","text":"p Process handle, list process handles. grace Grace period, milliseconds, used Unix. zero, ps_kill() first sends SIGTERM signal processes p. proccesses terminate within grace milliseconds SIGTERM signal, ps_kill() kills sending SIGKILL signals.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_kill.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kill one or more processes — ps_kill","text":"Character vector, one element process handle p. process already dead ps_kill() tried kill , corresponding return value \"dead\". ps_kill() just killed , \"killed\".","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_kill.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Kill one or more processes — ps_kill","text":"Note since ps version 1.8, ps_kill() error p process (processes p list) already terminated.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_kill.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kill one or more processes — ps_kill","text":"","code":"px <- processx::process$new(\"sleep\", \"10\") p <- ps_handle(px$get_pid()) p #> <ps::ps_handle> PID=8384, NAME=sleep, AT=2025-04-12 09:00:30.72 ps_kill(p) #> [1] \"terminated\" p #> <ps::ps_handle> PID=8384, NAME=???, AT=2025-04-12 09:00:30.72 ps_is_running(p) #> [1] FALSE px$get_exit_status() #> [1] -15"},{"path":"https://ps.r-lib.org/dev/reference/ps_kill_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Mark a process and its (future) child tree — ps_mark_tree","title":"Mark a process and its (future) child tree — ps_mark_tree","text":"ps_mark_tree() generates random environment variable name sets  current R process. environment variable (default) inherited child (grandchild, etc.) processes, help finding processes, even (longer) related current R process. (.e. connected process tree.)","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_kill_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mark a process and its (future) child tree — ps_mark_tree","text":"","code":"ps_mark_tree()  with_process_cleanup(expr)  ps_find_tree(marker)  ps_kill_tree(marker, sig = signals()$SIGKILL, grace = 200)"},{"path":"https://ps.r-lib.org/dev/reference/ps_kill_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mark a process and its (future) child tree — ps_mark_tree","text":"expr R expression evaluate new context. marker String scalar, name environment variable use find marked processes. sig signal send marked processes Unix. Windows argument ignored currently. grace Grace period, milliseconds, used Unix, sig SIGKILL.  zero, ps_kill_tree() first sends SIGTERM signal processes. proccesses terminate within grace milliseconds SIGTERM signal, ps_kill_tree() kills sending SIGKILL signals.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_kill_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mark a process and its (future) child tree — ps_mark_tree","text":"ps_mark_tree() returns name environment variable, can used marker ps_kill_tree(). ps_find_tree() returns list ps_handle objects. ps_kill_tree() returns pids killed processes, named integer vector. names file names executables, available. with_process_cleanup() returns value evaluated expression.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_kill_tree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mark a process and its (future) child tree — ps_mark_tree","text":"ps_find_tree() finds processes set supplied environment variable returns list. ps_kill_tree() finds processes set supplied environment variable, kills (sends specified signal Unix). with_process_cleanup() evaluates R expression, cleans external processes started R process evaluating expression. includes child processes child processes, etc., recursively. returns list entries: result result expression, visible TRUE expression printed screen, process_cleanup named integer vector cleaned pids, names process names. expr throws error, with_process_cleanup(), error. Nevertheless processes still cleaned .","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_kill_tree.html","id":"macos-issues","dir":"Reference","previous_headings":"","what":"macOS issues","title":"Mark a process and its (future) child tree — ps_mark_tree","text":"functions work macOS, unless specific criteria met. See ps_environ() details.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_kill_tree.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Mark a process and its (future) child tree — ps_mark_tree","text":"Note with_process_cleanup() problematic R process multi-threaded threads start subprocesses. with_process_cleanup() cleans processes well, probably want. issue example RStudio. use with_process_cleanup(), unless sure R process single-threaded, threads start subprocesses. E.g. using package test cases usually fine, RStudio runs separate single-threaded process. holds manually running ps_mark_tree() ps_find_tree() ps_kill_tree(). safe way use process cleanup use processx package start subprocesses, set cleanup_tree = TRUE processx::run() processx::process constructor.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_loadavg.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the average system load over the last 1, 5 and 15 minutes as a tuple. — ps_loadavg","title":"Return the average system load over the last 1, 5 and 15 minutes as a tuple. — ps_loadavg","text":"“load” represents processes runnable state, either using CPU waiting use CPU (e.g. waiting disk /O). Windows emulated using Windows API spawns thread keeps running background updates results every 5 seconds, mimicking UNIX behavior. Thus, Windows, first time called next 5 seconds return meaningless (0.0, 0.0, 0.0) vector. numbers returned make sense related number CPU cores installed system. , instance, value 3.14 system 10 logical CPUs means system load 31.4% percent last N minutes.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_loadavg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the average system load over the last 1, 5 and 15 minutes as a tuple. — ps_loadavg","text":"","code":"ps_loadavg()"},{"path":"https://ps.r-lib.org/dev/reference/ps_loadavg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the average system load over the last 1, 5 and 15 minutes as a tuple. — ps_loadavg","text":"Numeric vector length 3.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_loadavg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the average system load over the last 1, 5 and 15 minutes as a tuple. — ps_loadavg","text":"","code":"ps_loadavg() #> [1] 1.10 0.44 0.18"},{"path":"https://ps.r-lib.org/dev/reference/ps_memory_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Memory usage information — ps_memory_info","title":"Memory usage information — ps_memory_info","text":"Memory usage information","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_memory_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Memory usage information — ps_memory_info","text":"","code":"ps_memory_info(p = ps_handle())  ps_memory_full_info(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_memory_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Memory usage information — ps_memory_info","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_memory_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Memory usage information — ps_memory_info","text":"Named real vector.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_memory_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Memory usage information — ps_memory_info","text":"ps_memory_info() returns information memory usage. returns named vector. Portable fields: rss: \"Resident Set Size\", non-swapped physical memory process used (bytes). UNIX matches \"top\"‘s 'RES' column (see doc). Windows alias wset field matches \"Memory\" column taskmgr.exe. vmem: \"Virtual Memory Size\", total amount virtual memory used process (bytes). UNIX matches \"top\"‘s 'VIRT' column (see doc). Windows alias pagefile field matches \"Working set (memory)\" column taskmgr.exe. Non-portable fields: shared: (Linux) memory potentially shared processes (bytes). matches \"top\"‘s 'SHR' column (see doc). text: (Linux): aka 'TRS' (text resident set) amount memory devoted executable code (bytes). matches \"top\"‘s 'CODE' column (see doc). data: (Linux): aka 'DRS' (data resident set) amount physical memory devoted executable code (bytes). matches \"top\"‘s 'DATA' column (see doc). lib: (Linux): memory used shared libraries (bytes). dirty: (Linux): amount memory dirty pages (bytes). pfaults: (macOS): number page faults. pageins: (macOS): number actual pageins. explanation Windows fields see PROCESS_MEMORY_COUNTERS_EX structure. ps_memory_full_info() returns fields ps_memory_info(), plus additional information, typically takes slightly longer run, might access processes ps_memory_info() can query: maxrss maximum resident set size process's lifetime. works calling process, otherwise NA_real_. uss: Unique Set Size, memory unique process freed process terminated right now. pss (Linux ): Proportional Set Size, amount memory shared processes, accounted way amount divided evenly processes share . .e. process 10 MBs 10 MBs shared another process PSS 15 MBs. swap (Linux ): amount memory swapped disk. throw zombie_process() error zombie processes.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_memory_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Memory usage information — ps_memory_info","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=7270, NAME=R, AT=2025-04-12 09:00:16.36 ps_memory_info(p) #>       rss       vms    shared      text       lib      data     dirty  #> 273260544 960622592  31064064      4096         0 767004672         0  ps_memory_full_info(p) #>       rss       vms    shared      text       lib      data     dirty  #> 273260544 960622592  31064064      4096         0 767004672         0  #>    maxrss       uss       pss      swap  #> 273260544 255258624 258848768         0"},{"path":"https://ps.r-lib.org/dev/reference/ps_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Process name — ps_name","title":"Process name — ps_name","text":"name program, typically name executable.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process name — ps_name","text":"","code":"ps_name(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process name — ps_name","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process name — ps_name","text":"Character scalar.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process name — ps_name","text":"Unix can change, e.g. via exec*() system call. ps_name() works zombie processes.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process name — ps_name","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=7270, NAME=R, AT=2025-04-12 09:00:16.36 ps_name(p) #> [1] \"R\" ps_exe(p) #> [1] \"/opt/R/4.5.0/lib/R/bin/exec/R\" ps_cmdline(p) #> [1] \"/opt/R/4.5.0/lib/R/bin/exec/R\"                                       #> [2] \"--no-echo\"                                                           #> [3] \"--no-restore\"                                                        #> [4] \"--file=/home/runner/work/_temp/4d20021c-34a8-44e6-9cde-c85d52011f4f\""},{"path":"https://ps.r-lib.org/dev/reference/ps_num_fds.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of open file descriptors — ps_num_fds","title":"Number of open file descriptors — ps_num_fds","text":"Note IDEs, e.g. RStudio R.app macOS, IDE opens files threads, addition files opened main R thread.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_num_fds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of open file descriptors — ps_num_fds","text":"","code":"ps_num_fds(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_num_fds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of open file descriptors — ps_num_fds","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_num_fds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of open file descriptors — ps_num_fds","text":"Integer scalar.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_num_fds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Number of open file descriptors — ps_num_fds","text":"zombie process throws zombie_process error.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_num_fds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of open file descriptors — ps_num_fds","text":"","code":"p <- ps_handle() ps_num_fds(p) #> [1] 20 f <- file(tmp <- tempfile(), \"w\") ps_num_fds(p) #> [1] 21 close(f) unlink(tmp) ps_num_fds(p) #> [1] 20"},{"path":"https://ps.r-lib.org/dev/reference/ps_num_threads.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of threads — ps_num_threads","title":"Number of threads — ps_num_threads","text":"Throws zombie_process() error zombie processes.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_num_threads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of threads — ps_num_threads","text":"","code":"ps_num_threads(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_num_threads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of threads — ps_num_threads","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_num_threads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of threads — ps_num_threads","text":"Integer scalar.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_num_threads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of threads — ps_num_threads","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=7270, NAME=R, AT=2025-04-12 09:00:16.36 ps_num_threads(p) #> [1] 2"},{"path":"https://ps.r-lib.org/dev/reference/ps_open_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Open files of a process — ps_open_files","title":"Open files of a process — ps_open_files","text":"Note IDEs, e.g. RStudio R.app macOS, IDE opens files threads, addition files opened main R thread.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_open_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open files of a process — ps_open_files","text":"","code":"ps_open_files(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_open_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open files of a process — ps_open_files","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_open_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open files of a process — ps_open_files","text":"Data frame columns: fd path. fd numeric file descriptor POSIX systems, NA Windows. path absolute path file.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_open_files.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Open files of a process — ps_open_files","text":"zombie process throws zombie_process error.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_open_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open files of a process — ps_open_files","text":"","code":"p <- ps_handle() ps_open_files(p) #> # A data frame: 15 × 2 #>       fd path                                                         #>    <int> <chr>                                                        #>  1     0 pipe:[28879]                                                 #>  2     1 pipe:[28880]                                                 #>  3     2 pipe:[28881]                                                 #>  4     3 /home/runner/work/_temp/4d20021c-34a8-44e6-9cde-c85d52011f4f #>  5     4 anon_inode:[eventpoll]                                       #>  6     5 pipe:[26618]                                                 #>  7     6 pipe:[26618]                                                 #>  8     7 pipe:[26619]                                                 #>  9     8 pipe:[26619]                                                 #> 10     9 anon_inode:[eventfd]                                         #> 11    10 pipe:[26623]                                                 #> 12    11 pipe:[26623]                                                 #> 13    16 /tmp/RtmpHEdlrf/Rf1c662ebc7820 (deleted)                     #> 14   149 pipe:[13712]                                                 #> 15   152 pipe:[13713]                                                 f <- file(tmp <- tempfile(), \"w\") ps_open_files(p) #> # A data frame: 16 × 2 #>       fd path                                                         #>    <int> <chr>                                                        #>  1     0 pipe:[28879]                                                 #>  2     1 pipe:[28880]                                                 #>  3     2 pipe:[28881]                                                 #>  4     3 /home/runner/work/_temp/4d20021c-34a8-44e6-9cde-c85d52011f4f #>  5     4 anon_inode:[eventpoll]                                       #>  6     5 pipe:[26618]                                                 #>  7     6 pipe:[26618]                                                 #>  8     7 pipe:[26619]                                                 #>  9     8 pipe:[26619]                                                 #> 10     9 anon_inode:[eventfd]                                         #> 11    10 pipe:[26623]                                                 #> 12    11 pipe:[26623]                                                 #> 13    16 /tmp/RtmpHEdlrf/Rf1c662ebc7820 (deleted)                     #> 14    17 /tmp/RtmpHEdlrf/file1c667337d22c                             #> 15   149 pipe:[13712]                                                 #> 16   152 pipe:[13713]                                                 close(f) unlink(tmp) ps_open_files(p) #> # A data frame: 15 × 2 #>       fd path                                                         #>    <int> <chr>                                                        #>  1     0 pipe:[28879]                                                 #>  2     1 pipe:[28880]                                                 #>  3     2 pipe:[28881]                                                 #>  4     3 /home/runner/work/_temp/4d20021c-34a8-44e6-9cde-c85d52011f4f #>  5     4 anon_inode:[eventpoll]                                       #>  6     5 pipe:[26618]                                                 #>  7     6 pipe:[26618]                                                 #>  8     7 pipe:[26619]                                                 #>  9     8 pipe:[26619]                                                 #> 10     9 anon_inode:[eventfd]                                         #> 11    10 pipe:[26623]                                                 #> 12    11 pipe:[26623]                                                 #> 13    16 /tmp/RtmpHEdlrf/Rf1c662ebc7820 (deleted)                     #> 14   149 pipe:[13712]                                                 #> 15   152 pipe:[13713]"},{"path":"https://ps.r-lib.org/dev/reference/ps_os_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the type of the OS — ps_os_type","title":"Query the type of the OS — ps_os_type","text":"Query type OS","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_os_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the type of the OS — ps_os_type","text":"","code":"ps_os_type()  ps_is_supported()"},{"path":"https://ps.r-lib.org/dev/reference/ps_os_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query the type of the OS — ps_os_type","text":"ps_os_type returns named logical vector. rest functions return logical scalar. ps_is_supported() returns TRUE ps supports current platform.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_os_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query the type of the OS — ps_os_type","text":"","code":"ps_os_type() #>   POSIX WINDOWS   LINUX   MACOS  #>    TRUE   FALSE    TRUE   FALSE  ps_is_supported() #> [1] TRUE"},{"path":"https://ps.r-lib.org/dev/reference/ps_pid.html","id":null,"dir":"Reference","previous_headings":"","what":"Pid of a process handle — ps_pid","title":"Pid of a process handle — ps_pid","text":"function works even process already finished.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_pid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pid of a process handle — ps_pid","text":"","code":"ps_pid(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_pid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pid of a process handle — ps_pid","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_pid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pid of a process handle — ps_pid","text":"Process id.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_pid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pid of a process handle — ps_pid","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=7270, NAME=R, AT=2025-04-12 09:00:16.36 ps_pid(p) #> [1] 7270 ps_pid(p) == Sys.getpid() #> [1] TRUE"},{"path":"https://ps.r-lib.org/dev/reference/ps_pids.html","id":null,"dir":"Reference","previous_headings":"","what":"Ids of all processes on the system — ps_pids","title":"Ids of all processes on the system — ps_pids","text":"Ids processes system","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_pids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ids of all processes on the system — ps_pids","text":"","code":"ps_pids()"},{"path":"https://ps.r-lib.org/dev/reference/ps_pids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ids of all processes on the system — ps_pids","text":"Integer vector process ids.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_ppid.html","id":null,"dir":"Reference","previous_headings":"","what":"Parent pid or parent process of a process — ps_ppid","title":"Parent pid or parent process of a process — ps_ppid","text":"ps_ppid() returns parent pid, ps_parent() returns ps_handle parent.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_ppid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parent pid or parent process of a process — ps_ppid","text":"","code":"ps_ppid(p = ps_handle())  ps_parent(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_ppid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parent pid or parent process of a process — ps_ppid","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_ppid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parent pid or parent process of a process — ps_ppid","text":"ps_ppid() returns integer scalar, pid parent p. ps_parent() returns ps_handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_ppid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parent pid or parent process of a process — ps_ppid","text":"POSIX systems, parent process terminates, another process (typically pid 1 process) marked parent. ps_ppid() ps_parent() return process . ps_ppid() ps_parent() work zombie processes.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_ppid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parent pid or parent process of a process — ps_ppid","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=7270, NAME=R, AT=2025-04-12 09:00:16.36 ps_ppid(p) #> [1] 1735 ps_parent(p) #> <ps::ps_handle> PID=1735, NAME=Runner.Worker, AT=2025-04-12 08:59:03.72"},{"path":"https://ps.r-lib.org/dev/reference/ps_resume.html","id":null,"dir":"Reference","previous_headings":"","what":"Resume (continue) a stopped process — ps_resume","title":"Resume (continue) a stopped process — ps_resume","text":"Resume process execution SIGCONT preemptively checking whether PID reused. Windows effect resuming process threads.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_resume.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resume (continue) a stopped process — ps_resume","text":"","code":"ps_resume(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_resume.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resume (continue) a stopped process — ps_resume","text":"p Process handle list process handles.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_resume.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resume (continue) a stopped process — ps_resume","text":"","code":"px <- processx::process$new(\"sleep\", \"10\") p <- ps_handle(px$get_pid()) p #> <ps::ps_handle> PID=8675, NAME=sleep, AT=2025-04-12 09:00:33 ps_suspend(p) #> NULL ps_status(p) #> [1] \"stopped\" ps_resume(p) #> NULL ps_status(p) #> [1] \"sleeping\" ps_kill(p) #> [1] \"terminated\""},{"path":"https://ps.r-lib.org/dev/reference/ps_send_signal.html","id":null,"dir":"Reference","previous_headings":"","what":"Send signal to a process — ps_send_signal","title":"Send signal to a process — ps_send_signal","text":"Send signal process. implemented Windows. See signals() list signals current platform.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_send_signal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send signal to a process — ps_send_signal","text":"","code":"ps_send_signal(p = ps_handle(), sig)"},{"path":"https://ps.r-lib.org/dev/reference/ps_send_signal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send signal to a process — ps_send_signal","text":"p Process handle, list process handles. sig Signal number, see signals().","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_send_signal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Send signal to a process — ps_send_signal","text":"checks process still running, sending signal, avoid signalling wrong process, pid reuse.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_send_signal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Send signal to a process — ps_send_signal","text":"","code":"px <- processx::process$new(\"sleep\", \"10\") p <- ps_handle(px$get_pid()) p #> <ps::ps_handle> PID=8700, NAME=sleep, AT=2025-04-12 09:00:33.22 ps_send_signal(p, signals()$SIGINT) #> NULL p #> <ps::ps_handle> PID=8700, NAME=???, AT=2025-04-12 09:00:33.22 ps_is_running(p) #> [1] FALSE px$get_exit_status() #> [1] -2"},{"path":"https://ps.r-lib.org/dev/reference/ps_shared_lib_users.html","id":null,"dir":"Reference","previous_headings":"","what":"List all processes that loaded a shared library — ps_shared_lib_users","title":"List all processes that loaded a shared library — ps_shared_lib_users","text":"List processes loaded shared library","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_shared_lib_users.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all processes that loaded a shared library — ps_shared_lib_users","text":"","code":"ps_shared_lib_users(paths, user = ps_username(), filter = NULL)"},{"path":"https://ps.r-lib.org/dev/reference/ps_shared_lib_users.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all processes that loaded a shared library — ps_shared_lib_users","text":"paths Character vector paths shared libraries look . must absolute paths. need exist. Forward slashes converted backward slashes Windows, output always backward slashes paths. user Character scalar NULL. NULL, processes user considered. defaults current user. filter Character vector NULL. NULL, vector glob expressions, used filter process names.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_shared_lib_users.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all processes that loaded a shared library — ps_shared_lib_users","text":"data frame columns: dll: file name dll file, without path, path: path shared library, pid: process ID process, name: name process, username: username process owner, ps_handle: ps_handle object, can used query manipulate process.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_shared_lib_users.html","id":"notes-","dir":"Reference","previous_headings":"","what":"Notes:","title":"List all processes that loaded a shared library — ps_shared_lib_users","text":"function currently works Windows. Windows, 32 bit R process can list 32 bit processes. Similarly, 64 bit R process can list 64 bit processes. limitation Windows API. Even though Windows file systems (almost always) case insensitive, matching paths, user also filter case sensitive. might change future. function can slow Windows, needs enumerate shared libraries processes system, unless filter argument set. Make sure set filter can. want look multiple shared libraries, list paths, instead calling ps_shared_lib_users individually. libraries loaded R processes, might want set filter c(\"Rgui.exe\", \"Rterm.exe\", \"rsession.exe\") last one RStudio.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_shared_lib_users.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all processes that loaded a shared library — ps_shared_lib_users","text":"","code":"if (FALSE) { # ps::ps_is_supported() && !ps:::is_cran_check() && ps::ps_os_type()[[\"WINDOWS\"]] dlls <- vapply(getLoadedDLLs(), \"[[\", character(1), \"path\") psdll <- dlls[[\"ps\"]][[1]] r_procs <- c(\"Rgui.exe\", \"Rterm.exe\", \"rsession.exe\") ps_shared_lib_users(psdll, filter = r_procs) }"},{"path":"https://ps.r-lib.org/dev/reference/ps_shared_libs.html","id":null,"dir":"Reference","previous_headings":"","what":"List the dynamically loaded libraries of a process — ps_shared_libs","title":"List the dynamically loaded libraries of a process — ps_shared_libs","text":"Note: function currently works Windows.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_shared_libs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the dynamically loaded libraries of a process — ps_shared_libs","text":"","code":"ps_shared_libs(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_shared_libs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the dynamically loaded libraries of a process — ps_shared_libs","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_shared_libs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the dynamically loaded libraries of a process — ps_shared_libs","text":"Data frame one column currently: path, absolute path loaded module shared library. Windows list includes executable file .","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_shared_libs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the dynamically loaded libraries of a process — ps_shared_libs","text":"","code":"if (FALSE) { # ps::ps_is_supported() && !ps:::is_cran_check() && ps::ps_os_type()[[\"WINDOWS\"]] # The loaded DLLs of the current process ps_shared_libs() }"},{"path":"https://ps.r-lib.org/dev/reference/ps_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Current process status — ps_status","title":"Current process status — ps_status","text":"One following: \"idle\": Process created fork, process sleeping long time. macOS . \"running\": Currently runnable macOS Windows. Actually running Linux. \"sleeping\" Sleeping wait poll. \"disk_sleep\" Uninterruptible sleep, waiting /O operation (Linux ). \"stopped\" Stopped, either job control signal traced. \"uninterruptible\" Process uninterruptible wait. macOS . \"tracing_stop\" Stopped tracing (Linux ). \"zombie\" Zombie. Finished, parent read exit status yet. \"dead\" never seen (Linux). \"wake_kill\" Received fatal signal (Linux ). \"waking\" Paging (Linux , valid since 2.6.xx kernel).","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current process status — ps_status","text":"","code":"ps_status(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current process status — ps_status","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current process status — ps_status","text":"Character scalar.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_status.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Current process status — ps_status","text":"might return NA_character_ macOS. Works zombie processes.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_status.html","id":"note-on-macos","dir":"Reference","previous_headings":"","what":"Note on macOS","title":"Current process status — ps_status","text":"macOS ps_status() often falls back calling external ps program, macOS let R access status processes. Notably, usually able access status R processes. external ps program always runs root user, also special entitlements, can typically access status processes. behavior problematic , e.g. calling external program slow, set ps.no_external_ps option TRUE:   Note setting option TRUE cause ps_status() return NA_character_ processes.","code":"options(ps.no_external_ps = TRUE)"},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current process status — ps_status","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=7270, NAME=R, AT=2025-04-12 09:00:16.36 ps_status(p) #> [1] \"running\""},{"path":"https://ps.r-lib.org/dev/reference/ps_suspend.html","id":null,"dir":"Reference","previous_headings":"","what":"Suspend (stop) the process — ps_suspend","title":"Suspend (stop) the process — ps_suspend","text":"Suspend process execution SIGSTOP preemptively checking whether PID reused. Windows effect suspending process threads.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_suspend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suspend (stop) the process — ps_suspend","text":"","code":"ps_suspend(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_suspend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suspend (stop) the process — ps_suspend","text":"p Process handle list process handles.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_suspend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Suspend (stop) the process — ps_suspend","text":"","code":"px <- processx::process$new(\"sleep\", \"10\") p <- ps_handle(px$get_pid()) p #> <ps::ps_handle> PID=8804, NAME=sleep, AT=2025-04-12 09:00:34.28 ps_suspend(p) #> NULL ps_status(p) #> [1] \"stopped\" ps_resume(p) #> NULL ps_status(p) #> [1] \"sleeping\" ps_kill(p) #> [1] \"terminated\""},{"path":"https://ps.r-lib.org/dev/reference/ps_system_cpu_times.html","id":null,"dir":"Reference","previous_headings":"","what":"System CPU times. — ps_system_cpu_times","title":"System CPU times. — ps_system_cpu_times","text":"Every attribute represents seconds CPU spent given mode. attributes availability varies depending platform: user: time spent normal processes executing user mode; Linux also includes guest time. system: time spent processes executing kernel mode. idle: time spent nothing.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_system_cpu_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"System CPU times. — ps_system_cpu_times","text":"","code":"ps_system_cpu_times()"},{"path":"https://ps.r-lib.org/dev/reference/ps_system_cpu_times.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"System CPU times. — ps_system_cpu_times","text":"Named list","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_system_cpu_times.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"System CPU times. — ps_system_cpu_times","text":"Platform-specific fields: nice (UNIX): time spent niced (prioritized) processes executing user mode; Linux also includes guest_nice time. iowait (Linux): time spent waiting /O complete. accounted idle time counter. irq (Linux): time spent servicing hardware interrupts. softirq (Linux): time spent servicing software interrupts. steal (Linux 2.6.11+): time spent operating systems running virtualized environment. guest (Linux 2.6.24+): time spent running virtual CPU guest operating systems control Linux kernel. guest_nice (Linux 3.2.0+): time spent running niced guest (virtual CPU guest operating systems control Linux kernel).","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_system_cpu_times.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"System CPU times. — ps_system_cpu_times","text":"","code":"ps_system_cpu_times() #>       user       nice     system       idle     iowait        irq  #>      73.48       3.34      46.27     795.61      27.77       0.00  #>    softirq      steal      guest guest_nice  #>       0.87       0.00       0.00       0.00"},{"path":"https://ps.r-lib.org/dev/reference/ps_system_memory.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistics about system memory usage — ps_system_memory","title":"Statistics about system memory usage — ps_system_memory","text":"Statistics system memory usage","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_system_memory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statistics about system memory usage — ps_system_memory","text":"","code":"ps_system_memory()"},{"path":"https://ps.r-lib.org/dev/reference/ps_system_memory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Statistics about system memory usage — ps_system_memory","text":"Named list. numbers bytes: total: total physical memory (exclusive swap). avail memory can given instantly processes without system going swap. calculated summing different memory values depending platform supposed used monitor actual memory usage cross platform fashion. percent: Percentage memory taken. used: memory used, calculated differently depending platform designed informational purposes . total - free necessarily match used. free: memory used (zeroed) readily available; note doesn’t reflect actual memory available (use available instead). total - used necessarily match free. active: (Unix ) memory currently use recently used, RAM. inactive: (Unix ) memory marked used. wired: (macOS ) memory marked always stay RAM. never moved disk. buffers: (Linux ) cache things like file system metadata. cached: (Linux ) cache various things. shared: (Linux ) memory may simultaneously accessed multiple processes. slab:  (Linux ) -kernel data structures cache.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_system_memory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Statistics about system memory usage — ps_system_memory","text":"","code":"ps_system_memory() #> $total #> [1] 16766763008 #>  #> $avail #> [1] 15297249280 #>  #> $percent #> [1] 8.764445 #>  #> $used #> [1] 1039101952 #>  #> $free #> [1] 8049221632 #>  #> $active #> [1] 1236590592 #>  #> $inactive #> [1] 6501036032 #>  #> $buffers #> [1] 216162304 #>  #> $cached #> [1] 7462277120 #>  #> $shared #> [1] 67235840 #>  #> $slab #> [1] 624144384 #>"},{"path":"https://ps.r-lib.org/dev/reference/ps_system_swap.html","id":null,"dir":"Reference","previous_headings":"","what":"System swap memory statistics — ps_system_swap","title":"System swap memory statistics — ps_system_swap","text":"System swap memory statistics","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_system_swap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"System swap memory statistics — ps_system_swap","text":"","code":"ps_system_swap()"},{"path":"https://ps.r-lib.org/dev/reference/ps_system_swap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"System swap memory statistics — ps_system_swap","text":"Named list. numbers bytes: total: total swap memory. used: used swap memory. free: free swap memory. percent: percentage usage. sin: number bytes system swapped disk (cumulative). NA Windows. sout: number bytes system swapped disk (cumulative). NA Windows.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_system_swap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"System swap memory statistics — ps_system_swap","text":"","code":"ps_system_swap() #> $total #> [1] 4294963200 #>  #> $used #> [1] 0 #>  #> $free #> [1] 4294963200 #>  #> $percent #> [1] 0 #>  #> $sin #> [1] 0 #>  #> $sout #> [1] 0 #>"},{"path":"https://ps.r-lib.org/dev/reference/ps_terminal.html","id":null,"dir":"Reference","previous_headings":"","what":"Terminal device of the process — ps_terminal","title":"Terminal device of the process — ps_terminal","text":"Returns terminal process. implemented Windows, always returns NA_character_. Unix returns NA_character_ process terminal.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_terminal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Terminal device of the process — ps_terminal","text":"","code":"ps_terminal(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_terminal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Terminal device of the process — ps_terminal","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_terminal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Terminal device of the process — ps_terminal","text":"Character scalar.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_terminal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Terminal device of the process — ps_terminal","text":"Works zombie processes.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_terminal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Terminal device of the process — ps_terminal","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=7270, NAME=R, AT=2025-04-12 09:00:16.36 ps_terminal(p) #> [1] NA"},{"path":"https://ps.r-lib.org/dev/reference/ps_terminate.html","id":null,"dir":"Reference","previous_headings":"","what":"Terminate a Unix process — ps_terminate","title":"Terminate a Unix process — ps_terminate","text":"Send SIGTERM signal process. implemented Windows.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_terminate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Terminate a Unix process — ps_terminate","text":"","code":"ps_terminate(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_terminate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Terminate a Unix process — ps_terminate","text":"p Process handle list process handles.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_terminate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Terminate a Unix process — ps_terminate","text":"Checks process still running, work around pid reuse.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_terminate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Terminate a Unix process — ps_terminate","text":"","code":"px <- processx::process$new(\"sleep\", \"10\") p <- ps_handle(px$get_pid()) p #> <ps::ps_handle> PID=8927, NAME=sleep, AT=2025-04-12 09:00:35.21 ps_terminate(p) #> NULL p #> <ps::ps_handle> PID=8927, NAME=???, AT=2025-04-12 09:00:35.21 ps_is_running(p) #> [1] FALSE px$get_exit_status() #> [1] -15"},{"path":"https://ps.r-lib.org/dev/reference/ps_tty_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the size of the current terminal — ps_tty_size","title":"Query the size of the current terminal — ps_tty_size","text":"standard output current R process terminal, e.g. redirected file, R process running GUI, throw error. need handle error want use function package.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_tty_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the size of the current terminal — ps_tty_size","text":"","code":"ps_tty_size()"},{"path":"https://ps.r-lib.org/dev/reference/ps_tty_size.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query the size of the current terminal — ps_tty_size","text":"error happens, error message different depending type device standard output . common error messages : \"Inappropriate ioctl device.\" \"Operation supported socket.\" \"Operation supported device.\" Whatever error message, ps_tty_size always fails error class ps_unknown_tty_size, can catch.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_tty_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query the size of the current terminal — ps_tty_size","text":"","code":"# An example that falls back to the 'width' option tryCatch(   ps_tty_size(),   ps_unknown_tty_size = function(err) {     c(width = getOption(\"width\"), height = NA_integer_)   } ) #>  width height  #>     71     NA"},{"path":"https://ps.r-lib.org/dev/reference/ps_uids.html","id":null,"dir":"Reference","previous_headings":"","what":"User ids and group ids of the process — ps_uids","title":"User ids and group ids of the process — ps_uids","text":"User ids group ids process. return integer vectors names: real, effective saved.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_uids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"User ids and group ids of the process — ps_uids","text":"","code":"ps_uids(p = ps_handle())  ps_gids(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_uids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"User ids and group ids of the process — ps_uids","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_uids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"User ids and group ids of the process — ps_uids","text":"Named integer vector length 3, names: real, effective saved.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_uids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"User ids and group ids of the process — ps_uids","text":"work zombie processes. implemented Windows, throw not_implemented error.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_uids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"User ids and group ids of the process — ps_uids","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=7270, NAME=R, AT=2025-04-12 09:00:16.36 ps_uids(p) #>      real effective     saved  #>      1001      1001      1001  ps_gids(p) #>      real effective     saved  #>       118       118       118"},{"path":"https://ps.r-lib.org/dev/reference/ps_username.html","id":null,"dir":"Reference","previous_headings":"","what":"Owner of the process — ps_username","title":"Owner of the process — ps_username","text":"name user owns process. Unix calculated real user id.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_username.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Owner of the process — ps_username","text":"","code":"ps_username(p = ps_handle())"},{"path":"https://ps.r-lib.org/dev/reference/ps_username.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Owner of the process — ps_username","text":"p Process handle.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_username.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Owner of the process — ps_username","text":"String scalar.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_username.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Owner of the process — ps_username","text":"Unix, numeric uid id returned uid user database, thus username determined. Works zombie processes.","code":""},{"path":[]},{"path":"https://ps.r-lib.org/dev/reference/ps_username.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Owner of the process — ps_username","text":"","code":"p <- ps_handle() p #> <ps::ps_handle> PID=7270, NAME=R, AT=2025-04-12 09:00:16.36 ps_username(p) #> [1] \"runner\""},{"path":"https://ps.r-lib.org/dev/reference/ps_users.html","id":null,"dir":"Reference","previous_headings":"","what":"List users connected to the system — ps_users","title":"List users connected to the system — ps_users","text":"List users connected system","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_users.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List users connected to the system — ps_users","text":"","code":"ps_users()"},{"path":"https://ps.r-lib.org/dev/reference/ps_users.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List users connected to the system — ps_users","text":"data frame columns username, tty, hostname, start_time, pid. tty pid NA Windows. pid process id login process. local users hostname column empty string.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_wait.html","id":null,"dir":"Reference","previous_headings":"","what":"Wait for one or more processes to terminate, with a timeout — ps_wait","title":"Wait for one or more processes to terminate, with a timeout — ps_wait","text":"function supports interruption SIGINT Unix, CTRL+C CTRL+BREAK Windows.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_wait.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wait for one or more processes to terminate, with a timeout — ps_wait","text":"","code":"ps_wait(p, timeout = -1)"},{"path":"https://ps.r-lib.org/dev/reference/ps_wait.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wait for one or more processes to terminate, with a timeout — ps_wait","text":"p process handle, list process handles. process(es) wait . timeout Timeout milliseconds. -1, ps_wait() wait indefinitely (interrupted). 0, checks processes already terminated, returns immediately.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_wait.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wait for one or more processes to terminate, with a timeout — ps_wait","text":"Logical vector, one value process p. processes terminated contains TRUE value. processes still running contains FALSE value.","code":""},{"path":"https://ps.r-lib.org/dev/reference/ps_wait.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wait for one or more processes to terminate, with a timeout — ps_wait","text":"","code":"# this example calls `sleep`, so it only works on Unix p1 <- processx::process$new(\"sleep\", \"100\") p2 <- processx::process$new(\"sleep\", \"100\")  # returns c(FALSE, FALSE) immediately if p1 and p2 are running ps_wait(list(p1$as_ps_handle(), p2$as_ps_handle()), 0) #> [1] FALSE FALSE  # timeouts at one second ps_wait(list(p1$as_ps_handle(), p2$as_ps_handle()), 1000) #> [1] FALSE FALSE  p1$kill() #> [1] TRUE p2$kill() #> [1] TRUE # returns c(TRUE, TRUE) immediately ps_wait(list(p1$as_ps_handle(), p2$as_ps_handle()), 1000) #> [1] TRUE TRUE"},{"path":"https://ps.r-lib.org/dev/reference/signals.html","id":null,"dir":"Reference","previous_headings":"","what":"List of all supported signals — signals","title":"List of all supported signals — signals","text":"signals supported current platform included.","code":""},{"path":"https://ps.r-lib.org/dev/reference/signals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of all supported signals — signals","text":"","code":"signals()"},{"path":"https://ps.r-lib.org/dev/reference/signals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of all supported signals — signals","text":"List integers, named signal names.","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-development-version","dir":"Changelog","previous_headings":"","what":"ps (development version)","title":"ps (development version)","text":"ps now builds correctly Alpine Linux (3.19) R 4.5.0.","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-190","dir":"Changelog","previous_headings":"","what":"ps 1.9.0","title":"ps 1.9.0","text":"CRAN release: 2025-02-18 ps_memory_full_info() now contains maxrss, maximum resident set size calling process. New columns argument ps(), customize data returned (#138).","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-181","dir":"Changelog","previous_headings":"","what":"ps 1.8.1","title":"ps 1.8.1","text":"CRAN release: 2024-10-28 ps can now installed unsupported platforms.","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-180","dir":"Changelog","previous_headings":"","what":"ps 1.8.0","title":"ps 1.8.0","text":"CRAN release: 2024-09-12 New ps_apps() function list running applications macOS. New function ps_disk_io_counters() query disk /O counters (#145, @michaelwalshe). New ps_fs_info() query information file system one files directories. New ps_wait() start interruptible wait multiple processes, timeout (#166). ps_handle() now allows numeric (double) scalar pid, long value integer. ps_send_signal(), ps_suspend(), ps_resume(), ps_terminate(), ps_kill(), ps_interrupt() can now operate multiple processes, passed list process handles. ps_kill() ps_kill_tree() new grace argument. Unix, argument zero, ps_kill() first sends TERM signal, waits processes quit gracefully, via ps_wait(). processes still alive grace period killed SIGKILL. ps_status() (thus ps()) now better getting correct status processes macOS. usually requires calling external ps tool. See ?ps_status() opt new behavior (#31).","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-177","dir":"Changelog","previous_headings":"","what":"ps 1.7.7","title":"ps 1.7.7","text":"CRAN release: 2024-07-02 ps_cpu_times() values now correct newer arm64 macOS.","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-176","dir":"Changelog","previous_headings":"","what":"ps 1.7.6","title":"ps 1.7.6","text":"CRAN release: 2024-01-18 ps_name() now fail rare case ps_cmdline() returns empty vector (#150). ps_system_cpu_times() now returns CPU times divided HZ reported CLK_TCK, -line OS’s per-process version. (#144, @michaelwalshe).","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-175","dir":"Changelog","previous_headings":"","what":"ps 1.7.5","title":"ps 1.7.5","text":"CRAN release: 2023-04-18 user visible changes.","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-174","dir":"Changelog","previous_headings":"","what":"ps 1.7.4","title":"ps 1.7.4","text":"CRAN release: 2023-04-02 ps::ps_get_cpu_affinity() now works processes Linux, calling process.","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-173","dir":"Changelog","previous_headings":"","what":"ps 1.7.3","title":"ps 1.7.3","text":"CRAN release: 2023-03-21 output ps_disk_usage(), ps_disk_partitions() ps_shared_lib_users() now include spurious stringsAsFactors column.","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-172","dir":"Changelog","previous_headings":"","what":"ps 1.7.2","title":"ps 1.7.2","text":"CRAN release: 2022-10-26 ps_system_memory()$percent now returns number scaled 0 100 Windows, rather 0 1 (#131, @francisbarton).","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-171","dir":"Changelog","previous_headings":"","what":"ps 1.7.1","title":"ps 1.7.1","text":"CRAN release: 2022-06-18 ps now returns data frames instead tibbles. data frames tibbles similar, completely compatible. convert output ps tibbles call tibble::as_tibble() function . ps() now fail user specified (#129).","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-170","dir":"Changelog","previous_headings":"","what":"ps 1.7.0","title":"ps 1.7.0","text":"CRAN release: 2022-04-23 ps now compiles platforms enable OpenMP (#109). New functions ps_get_cpu_affinity() ps_set_cpu_affinity() query set CPU affinity (#123). ps_memory_info() now mix rss vms Linux. ps_memory_info() now reports memory bytes instead pages Linux (#115)","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-160","dir":"Changelog","previous_headings":"","what":"ps 1.6.0","title":"ps 1.6.0","text":"CRAN release: 2021-02-28 New function ps_system_cpu_times() calculate system CPU times. New function ps_loadavg() show Unix style load average.","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-150","dir":"Changelog","previous_headings":"","what":"ps 1.5.0","title":"ps 1.5.0","text":"CRAN release: 2020-12-05 New function ps_shared_libs() list loaded shared libraries process, Windows. New function ps_shared_lib_users() list processes loaded certain shared library, Windows. New function ps_descent() query ancestry process.","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-140","dir":"Changelog","previous_headings":"","what":"ps 1.4.0","title":"ps 1.4.0","text":"CRAN release: 2020-10-07 ps now MIT license. Process functions now default calling R process. e.g. can write simply ps_connections() list network connections current process, instead ps_connections(ps_handle()). New ps_get_nice() ps_set_nice() functions get set priority process (#89). New ps_system_memory() ps_system_swap() functions, return information system memory swap usage. New ps_disk_partitions() ps_disk_usage() functions, return information file systems, similarly mount df Unix commands. New ps_tty_size() function query size terminal. Fixed issue CleanupReporter() triggered random failures macOS.","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-134","dir":"Changelog","previous_headings":"","what":"ps 1.3.4","title":"ps 1.3.4","text":"CRAN release: 2020-08-11 ps_cpu_count() now reports correct number Windows, even package binary built Windows version different API (#77).","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-133","dir":"Changelog","previous_headings":"","what":"ps 1.3.3","title":"ps 1.3.3","text":"CRAN release: 2020-05-08 New function errno() returns table errno.h error codes description. ps now compiles Solaris.","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-132","dir":"Changelog","previous_headings":"","what":"ps 1.3.2","title":"ps 1.3.2","text":"CRAN release: 2020-02-13 ps now compiles unsupported platforms like Solaris.","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-131","dir":"Changelog","previous_headings":"","what":"ps 1.3.1","title":"ps 1.3.1","text":"CRAN release: 2020-02-12 Fixed installation problem Windows versions, output cmd /c ver looks different (#69).","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-130","dir":"Changelog","previous_headings":"","what":"ps 1.3.0","title":"ps 1.3.0","text":"CRAN release: 2018-12-21 New ps_cpu_count() function returns number logical physical processors.","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-121","dir":"Changelog","previous_headings":"","what":"ps 1.2.1","title":"ps 1.2.1","text":"CRAN release: 2018-11-06 Fix crash Linux, happened load time (#50).","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-120","dir":"Changelog","previous_headings":"","what":"ps 1.2.0","title":"ps 1.2.0","text":"CRAN release: 2018-10-16 New ps_connections() list network connections. CleanupReporter() testthat reporter can check leftover open network connections test cases. ps_open_files() include open sockets now Linux, rather included ps_connections(). CleanupReporter() now ignores /dev/urandom, packages (curl, openssl, etc.) keep file open. Fix ps() printing without tibble package (#43). Fix compilation ICC (#39). Fix crash Linux (#47).","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-110","dir":"Changelog","previous_headings":"","what":"ps 1.1.0","title":"ps 1.1.0","text":"CRAN release: 2018-08-10 New ps_num_fds() returns number open files/handles. New ps_open_files() lists open files process. New ps_interrupt() interrupts process. sends SIGINT signal POSIX systems, can send CTRL+C CTRL+BREAK events Windows. New ps_users() lists users connected system. New ps_mark_tree(), ps_find_tree(), ps_kill_tree(), with_process_cleanup(): functions mark clean child processes. New CleanupReporter, used testthat: checks leftover child processes open files test_that() blocks.","code":""},{"path":"https://ps.r-lib.org/dev/news/index.html","id":"ps-100","dir":"Changelog","previous_headings":"","what":"ps 1.0.0","title":"ps 1.0.0","text":"CRAN release: 2018-07-22 First released version.","code":""}]
